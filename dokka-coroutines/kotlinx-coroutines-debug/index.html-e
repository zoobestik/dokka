<!doctype html>
<html class="no-js">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>kotlinx-coroutines-debug</title><meta name="robots" content="noindex, nofollow">
<link href="../images/logo-icon.svg" rel="icon" type="image/svg"><script>var pathToRoot = "../";</script>
    <script>document.documentElement.classList.replace("no-js","js");</script>    <script>const storage = localStorage.getItem("dokka-dark-mode")
    if (storage == null) {
        const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        if (osDarkSchemePreferred === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    } else {
        const savedDarkMode = JSON.parse(storage)
        if(savedDarkMode === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    }
    </script>
<script type="text/javascript" src="../scripts/sourceset_dependencies.js" async></script>
<link href="../styles/style.css" rel="Stylesheet">
<link href="../styles/main.css" rel="Stylesheet">
<link href="../styles/prism.css" rel="Stylesheet">
<link href="../styles/logo-styles.css" rel="Stylesheet">
<script type="text/javascript" src="../scripts/clipboard.js" async></script>
<script type="text/javascript" src="../scripts/navigation-loader.js" async></script>
<script type="text/javascript" src="../scripts/platform-content-handler.js" async></script>
<script type="text/javascript" src="../scripts/main.js" defer></script>
<script type="text/javascript" src="../scripts/prism.js" async></script>
<script type="text/javascript" src="../scripts/symbol-parameters-wrapper_deferred.js" defer></script></head>
<body>
    <div class="root">
<nav class="navigation" id="navigation-wrapper">
    <div class="navigation--inner">
        <div class="navigation-title">
            <button class="menu-toggle" id="menu-toggle" type="button">toggle menu</button>
            <div class="library-name">
<a class="library-name--link" href="../index.html">
                            kotlinx.coroutines
                    </a>            </div>
            <div class="library-version">1.7.1-SNAPSHOT
            </div>
        </div>
        <div class="filter-section" id="filter-section">
                <button class="platform-tag platform-selector jvm-like" data-active="" data-filter=":kotlinx-coroutines-debug:dokkaHtmlPartial/main">jvm</button>
        </div>
    </div>
    <div class="navigation-controls">
        <button class="navigation-controls--btn navigation-controls--theme" id="theme-toggle-button" type="button">switch theme</button>
        <div class="navigation-controls--btn navigation-controls--search" id="searchBar" role="button">search in API</div>
    </div>
</nav>
        <div id="container">
            <div class="sidebar" id="leftColumn">
                <div class="sidebar--inner" id="sideMenu"></div>
            </div>
            <div id="main">
<div class="main-content" id="content" pageids="kotlinx-coroutines-debug::////PointingToDeclaration//-1708783535">
  <div class="breadcrumbs"></div>
  <div class="cover ">
    <h1 class="cover"><span><span>kotlinx-coroutines-debug</span></span></h1>
    <div class="platform-hinted UnderCoverText" data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-debug:dokkaHtmlPartial/main"><p class="paragraph">Debugging facilities for <code class="lang-kotlin">kotlinx.coroutines</code> on JVM.</p><h3 class=""> Overview</h3><p class="paragraph">This module provides a debug JVM agent that allows to track and trace existing coroutines. The main entry point to debug facilities is <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html">DebugProbes</a> API. Call to <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/install.html">DebugProbes.install</a> installs debug agent via ByteBuddy and starts spying on coroutines when they are created, suspended and resumed.</p><p class="paragraph">After that, you can use <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines.html">DebugProbes.dumpCoroutines</a> to print all active (suspended or running) coroutines, including their state, creation and suspension stacktraces. Additionally, it is possible to process the list of such coroutines via <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines-info.html">DebugProbes.dumpCoroutinesInfo</a> or dump isolated parts of coroutines hierarchy referenced by a <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html">Job</a> or <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html">CoroutineScope</a> instances using  <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-job.html">DebugProbes.printJob</a> and <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-scope.html">DebugProbes.printScope</a> respectively.</p><p class="paragraph">This module also provides an automatic <a href="https://github.com/reactor/BlockHound">BlockHound</a> integration that detects when a blocking operation was called in a coroutine context that prohibits it. In order to use it, please follow the BlockHound <a href="https://github.com/reactor/BlockHound/blob/1.0.2.RELEASE/docs/quick_start.md">quick start guide</a>.</p><h3 class=""> Using in your project</h3><p class="paragraph">Add <code class="lang-kotlin">kotlinx-coroutines-debug</code> to your project test dependencies:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">dependencies {<br>    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-debug:1.4.0'<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><h3 class=""> Using in unit tests</h3><p class="paragraph">For JUnit4 debug module provides special test rule, <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/index.html">CoroutinesTimeout</a>, for installing debug probes and to dump coroutines on timeout to simplify tests debugging.</p><p class="paragraph">Its usage is better demonstrated by the example (runnable code is test/TestRuleExample.kt):</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">class TestRuleExample {<br>    @get:Rule<br>    public val timeout = CoroutinesTimeout.seconds(1)<br><br>    private suspend fun someFunctionDeepInTheStack() {<br>        withContext(Dispatchers.IO) {<br>            delay(Long.MAX_VALUE) // Hang method<br>        }  <br>    }<br><br>    @Test<br>    fun hangingTest() = runBlocking {<br>        val job = launch {<br>            someFunctionDeepInTheStack()<br>        }<br>        job.join() // Join will hang<br>    }<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">After 1 second, test will fail with <code class="lang-kotlin">TestTimeoutException</code> and all coroutines (<code class="lang-kotlin">runBlocking</code> and <code class="lang-kotlin">launch</code>) and their stacktraces will be dumped to the console.</p><h3 class=""> Using as JVM agent</h3><p class="paragraph">Debug module can also be used as a standalone JVM agent to enable debug probes on the application startup. You can run your application with an additional argument: <code class="lang-kotlin">-javaagent:kotlinx-coroutines-debug-1.7.1.jar</code>. Additionally, on Linux and Mac OS X you can use <code class="lang-kotlin">kill -5 $pid</code> command in order to force your application to print all alive coroutines. When used as Java agent, <code class="lang-kotlin">"kotlinx.coroutines.debug.enable.creation.stack.trace"</code> system property can be used to control  <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/enable-creation-stack-traces.html">DebugProbes.enableCreationStackTraces</a> along with agent startup.</p><h3 class=""> Using in production environment</h3><p class="paragraph">It is possible to run an application in production environments with debug probes in order to monitor its  state and improve its observability.  For that, it is strongly recommended to switch off <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/enable-creation-stack-traces.html">DebugProbes.enableCreationStackTraces</a> property to significantly  reduce the overhead of debug probes and make it insignificant. With creation stack-traces disabled, the typical overhead of enabled debug probes is a single-digit percentage of the total application throughput.</p><h3 class=""> Example of usage</h3><p class="paragraph">Capabilities of this module can be demonstrated by the following example  (runnable code is test/Example.kt):</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">suspend fun computeValue(): String = coroutineScope {<br>    val one = async { computeOne() }<br>    val two = async { computeTwo() }<br>    combineResults(one, two)<br>}<br><br>suspend fun combineResults(one: Deferred&lt;String&gt;, two: Deferred&lt;String&gt;): String =<br>    one.await() + two.await()<br><br>suspend fun computeOne(): String {<br>    delay(5000)<br>    return "4"<br>}<br><br>suspend fun computeTwo(): String {<br>    delay(5000)<br>    return "2"<br>}<br><br>fun main() = runBlocking {<br>    DebugProbes.install()<br>    val deferred = async { computeValue() }<br>    // Delay for some time<br>    delay(1000)<br>    // Dump running coroutines<br>    DebugProbes.dumpCoroutines()<br>    println("\nDumping only deferred")<br>    DebugProbes.printJob(deferred)<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Printed result will be:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">Coroutines dump 2018/11/12 21:44:02<br><br>Coroutine "coroutine#2":DeferredCoroutine{Active}@289d1c02, state: SUSPENDED<br>	at kotlinx.coroutines.DeferredCoroutine.await$suspendImpl(Builders.common.kt:99)<br>	at ExampleKt.combineResults(Example.kt:11)<br>	at ExampleKt$computeValue$2.invokeSuspend(Example.kt:7)<br>	at ExampleKt$main$1$deferred$1.invokeSuspend(Example.kt:25)<br>	at _COROUTINE._CREATION._(CoroutineDebugging.kt)<br>	at kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:116)<br>	at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:25)<br>	at kotlinx.coroutines.BuildersKt.async$default(Unknown Source)<br>	at ExampleKt$main$1.invokeSuspend(Example.kt:25)<br>	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:32)<br>	at kotlinx.coroutines.DispatchedTask.run(Dispatched.kt:233)<br>	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)<br>	at ExampleKt.main(Example.kt:23)<br>	at ExampleKt.main(Example.kt)<br><br>... More coroutines here ...<br><br>Dumping only deferred<br>"coroutine#2":DeferredCoroutine{Active}, continuation is SUSPENDED at line kotlinx.coroutines.DeferredCoroutine.await$suspendImpl(Builders.common.kt:99)<br>    "coroutine#3":DeferredCoroutine{Active}, continuation is SUSPENDED at line ExampleKt.computeOne(Example.kt:14)<br>    "coroutine#4":DeferredCoroutine{Active}, continuation is SUSPENDED at line ExampleKt.computeTwo(Example.kt:19)</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><h3 class=""> Status of the API</h3><p class="paragraph">API is experimental, and it is not guaranteed it won't be changed (while it is marked as <code class="lang-kotlin">@ExperimentalCoroutinesApi</code>). Like the rest of experimental API, <code class="lang-kotlin">DebugProbes</code> is carefully designed, tested and ready to use in both test and production  environments. It is marked as experimental to leave us the room to enrich the output data in a potentially backwards incompatible manner to further improve diagnostics and debugging experience.</p><p class="paragraph">The output format of <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html">DebugProbes</a> can be changed in the future and it is not recommended to rely on the string representation of the dump programmatically.</p><h3 class=""> Debug agent and Android</h3><p class="paragraph">Android runtime does not support Instrument API necessary for <code class="lang-kotlin">kotlinx-coroutines-debug</code> to function, triggering <code class="lang-kotlin">java.lang.NoClassDefFoundError: Failed resolution of: Ljava/lang/management/ManagementFactory;</code>, and it is not possible to use coroutine debugger along with Android emulator.</p><!--
Make an exception googlable
java.lang.NoClassDefFoundError: Failed resolution of: Ljava/lang/management/ManagementFactory;
        at kotlinx.coroutines.repackaged.net.bytebuddy.agent.ByteBuddyAgent$ProcessProvider$ForCurrentVm$ForLegacyVm.resolve(ByteBuddyAgent.java:1055)
        at kotlinx.coroutines.repackaged.net.bytebuddy.agent.ByteBuddyAgent$ProcessProvider$ForCurrentVm.resolve(ByteBuddyAgent.java:1038)
        at kotlinx.coroutines.repackaged.net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:374)
        at kotlinx.coroutines.repackaged.net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:342)
        at kotlinx.coroutines.repackaged.net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:328)
        at kotlinx.coroutines.debug.internal.DebugProbesImpl.install(DebugProbesImpl.kt:39)
        at kotlinx.coroutines.debug.DebugProbes.install(DebugProbes.kt:49)
--><h4 class=""> Build failures due to duplicate resource files</h4><p class="paragraph">Building an Android project that depends on <code class="lang-kotlin">kotlinx-coroutines-debug</code> (usually introduced by being a transitive dependency of <code class="lang-kotlin">kotlinx-coroutines-test</code>) may fail with <code class="lang-kotlin">DuplicateRelativeFileException</code> for <code class="lang-kotlin">META-INF/AL2.0</code>, <code class="lang-kotlin">META-INF/LGPL2.1</code>, or <code class="lang-kotlin">win32-x86/attach_hotspot_windows.dll</code> when trying to merge the Android resource.</p><p class="paragraph">The problem is that Android merges the resources of all its dependencies into a single directory and complains about conflicts, but:</p><ul><li><p class="paragraph"><code class="lang-kotlin">kotlinx-coroutines-debug</code> transitively depends on JNA and JNA-platform, both of which include license files in their   META-INF directories. Trying to merge these files leads to conflicts, which means that any Android project that   depends on JNA and JNA-platform will experience build failures.</p></li><li><p class="paragraph">Additionally, <code class="lang-kotlin">kotlinx-coroutines-debug</code> embeds <code class="lang-kotlin">byte-buddy-agent</code> and <code class="lang-kotlin">byte-buddy</code>, along with their resource files.   Then, if the project separately depends on <code class="lang-kotlin">byte-buddy</code>, merging the resources of <code class="lang-kotlin">kotlinx-coroutines-debug</code> with ones   from <code class="lang-kotlin">byte-buddy</code> and <code class="lang-kotlin">byte-buddy-agent</code> will lead to conflicts as the resource files are duplicated.</p></li></ul><p class="paragraph">One possible workaround for these issues is to add the following to the <code class="lang-kotlin">android</code> block in your gradle file for the application subproject:</p><div class="sample-container"><pre><code class="block lang-groovy" theme="idea">     packagingOptions {<br>         // for JNA and JNA-platform<br>         exclude "META-INF/AL2.0"<br>         exclude "META-INF/LGPL2.1"<br>         // for byte-buddy<br>         exclude "META-INF/licenses/ASM"<br>         pickFirst "win32-x86-64/attach_hotspot_windows.dll"<br>         pickFirst "win32-x86/attach_hotspot_windows.dll"<br>     }</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">This will cause the resource merge algorithm to exclude the problematic license files altogether and only leave a single copy of the files needed for <code class="lang-kotlin">byte-buddy-agent</code> to work.</p><p class="paragraph">Alternatively, avoid depending on <code class="lang-kotlin">kotlinx-coroutines-debug</code>. In particular, if the only reason why this library a dependency of your project is that <code class="lang-kotlin">kotlinx-coroutines-test</code> in turn depends on it, you may change your dependency on <code class="lang-kotlin">kotlinx.coroutines.test</code> to exclude <code class="lang-kotlin">kotlinx-coroutines-debug</code>. For example, you could replace</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version")</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">with</p><div class="sample-container"><pre><code class="block lang-groovy" theme="idea">androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version") {<br>    exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><!--
Snippets of stacktraces for googling:

org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:mergeDebugAndroidTestJavaResource'.
        ...
Caused by: org.gradle.workers.intelrnal.DefaultWorkerExecutor$WorkExecutionException: A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade
        ...
Caused by: com.android.builder.merge.DuplicateRelativeFileException: More than one file was found with OS independent path 'META-INF/AL2.0'.
        at com.android.builder.merge.StreamMergeAlgorithms.lambda$acceptOnlyOne$2(StreamMergeAlgorithms.java:85)
        at com.android.builder.merge.StreamMergeAlgorithms.lambda$select$3(StreamMergeAlgorithms.java:106)
        at com.android.builder.merge.IncrementalFileMergerOutputs$1.create(IncrementalFileMergerOutputs.java:88)
        at com.android.builder.merge.DelegateIncrementalFileMergerOutput.create(DelegateIncrementalFileMergerOutput.java:64)
        at com.android.build.gradle.internal.tasks.MergeJavaResourcesDelegate$run$output$1.create(MergeJavaResourcesDelegate.kt:230)
        at com.android.builder.merge.IncrementalFileMerger.updateChangedFile(IncrementalFileMerger.java:242)
        at com.android.builder.merge.IncrementalFileMerger.mergeChangedInputs(IncrementalFileMerger.java:203)
        at com.android.builder.merge.IncrementalFileMerger.merge(IncrementalFileMerger.java:80)
        at com.android.build.gradle.internal.tasks.MergeJavaResourcesDelegate.run(MergeJavaResourcesDelegate.kt:276)
        at com.android.build.gradle.internal.tasks.MergeJavaResRunnable.run(MergeJavaResRunnable.kt:81)
        at com.android.build.gradle.internal.tasks.Workers$ActionFacade.run(Workers.kt:242)
        at org.gradle.workers.internal.AdapterWorkAction.execute(AdapterWorkAction.java:50)
        at org.gradle.workers.internal.DefaultWorkerServer.execute(DefaultWorkerServer.java:50)
        at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:63)
        at org.gradle.workers.internal.NoIsolationWorkerFactory$1$1.create(NoIsolationWorkerFactory.java:59)
        at org.gradle.internal.classloader.ClassLoaderUtils.executeInClassloader(ClassLoaderUtils.java:98)
        at org.gradle.workers.internal.NoIsolationWorkerFactory$1.lambda$execute$0(NoIsolationWorkerFactory.java:59)
        at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:44)
        at org.gradle.workers.internal.AbstractWorker$1.call(AbstractWorker.java:41)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:416)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$CallableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:406)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor$1.execute(DefaultBuildOperationExecutor.java:165)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:250)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:158)
        at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:102)
        at org.gradle.internal.operations.DelegatingBuildOperationExecutor.call(DelegatingBuildOperationExecutor.java:36)
        at org.gradle.workers.internal.AbstractWorker.executeWrappedInBuildOperation(AbstractWorker.java:41)
        at org.gradle.workers.internal.NoIsolationWorkerFactory$1.execute(NoIsolationWorkerFactory.java:53)
        at org.gradle.workers.internal.DefaultWorkerExecutor.lambda$submitWork$2(DefaultWorkerExecutor.java:200)
        at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runExecution(DefaultConditionalExecutionQueue.java:215)
        at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.runBatch(DefaultConditionalExecutionQueue.java:164)
        at org.gradle.internal.work.DefaultConditionalExecutionQueue$ExecutionRunner.run(DefaultConditionalExecutionQueue.java:131)

Execution failed for task ':app:mergeStagingDebugAndroidTestJavaResource'.
Execution failed for task ':app:mergeDebugAndroidTestJavaResource'.
Execution failed for task ':app:mergeDebugTestJavaResource'

More than one file was found with OS independent path 'META-INF/LGPL2.1'
More than one file was found with OS independent path 'win32-x86/attach_hotspot_windows.dll'
More than one file was found with OS independent path 'win32-x86-64/attach_hotspot_windows.dll'
--><!-- MODULE kotlinx-coroutines-core --><!-- INDEX kotlinx.coroutines --><!-- MODULE kotlinx-coroutines-debug --><!-- INDEX kotlinx.coroutines.debug --><!-- INDEX kotlinx.coroutines.debug.junit4 --><!-- END --></div></div>
  </div>
  <h2 class="">Packages</h2>
  <div class="table"><a data-name="-1316508967%2FPackages%2F-1708783535" anchor-label="kotlinx.coroutines.debug" id="-1316508967%2FPackages%2F-1708783535" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main"></a>
    <div class="table-row" data-filterable-current=":kotlinx-coroutines-debug:dokkaHtmlPartial/main" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main">
      <div>
        <div class="main-subrow ">
          <div class=""><span class="inline-flex">
              <div><a href="kotlinx.coroutines.debug/index.html">kotlinx.coroutines.debug</a></div>
<span class="anchor-wrapper"><span class="anchor-icon" pointing-to="-1316508967%2FPackages%2F-1708783535"></span>
                <div class="copy-popup-wrapper "><span class="copy-popup-icon"></span><span>Link copied to clipboard</span></div>
              </span></span></div>
          <div class="pull-right">
            <div class="platform-tags no-gutters">
              <div class="platform-tag jvm-like">jvm</div>
            </div>
          </div>
        </div>
        <div></div>
      </div>
    </div>
<a data-name="817735871%2FPackages%2F-1708783535" anchor-label="kotlinx.coroutines.debug.junit4" id="817735871%2FPackages%2F-1708783535" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main"></a>
    <div class="table-row" data-filterable-current=":kotlinx-coroutines-debug:dokkaHtmlPartial/main" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main">
      <div>
        <div class="main-subrow ">
          <div class=""><span class="inline-flex">
              <div><a href="kotlinx.coroutines.debug.junit4/index.html">kotlinx.coroutines.debug.junit4</a></div>
<span class="anchor-wrapper"><span class="anchor-icon" pointing-to="817735871%2FPackages%2F-1708783535"></span>
                <div class="copy-popup-wrapper "><span class="copy-popup-icon"></span><span>Link copied to clipboard</span></div>
              </span></span></div>
          <div class="pull-right">
            <div class="platform-tags no-gutters">
              <div class="platform-tag jvm-like">jvm</div>
            </div>
          </div>
        </div>
        <div></div>
      </div>
    </div>
<a data-name="1779349888%2FPackages%2F-1708783535" anchor-label="kotlinx.coroutines.debug.junit5" id="1779349888%2FPackages%2F-1708783535" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main"></a>
    <div class="table-row" data-filterable-current=":kotlinx-coroutines-debug:dokkaHtmlPartial/main" data-filterable-set=":kotlinx-coroutines-debug:dokkaHtmlPartial/main">
      <div>
        <div class="main-subrow ">
          <div class=""><span class="inline-flex">
              <div><a href="kotlinx.coroutines.debug.junit5/index.html">kotlinx.coroutines.debug.junit5</a></div>
<span class="anchor-wrapper"><span class="anchor-icon" pointing-to="1779349888%2FPackages%2F-1708783535"></span>
                <div class="copy-popup-wrapper "><span class="copy-popup-icon"></span><span>Link copied to clipboard</span></div>
              </span></span></div>
          <div class="pull-right">
            <div class="platform-tags no-gutters">
              <div class="platform-tag jvm-like">jvm</div>
            </div>
          </div>
        </div>
        <div></div>
      </div>
    </div>
  </div>
</div>
      <div class="footer">
        <span class="go-to-top-icon"><a href="#content" id="go-to-top-link"></a></span><span>© 2023 Copyright</span><span class="pull-right"><span>Generated by </span><a href="https://github.com/Kotlin/dokka"><span>dokka</span><span class="padded-icon"></span></a></span>
      </div>
            </div>
        </div>
    </div>
</body>
</html>

