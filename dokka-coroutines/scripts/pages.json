[{"name":"fun <T : Any> Flow.Publisher<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.jdk9.asFlow","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/as-flow.html","searchKeys":["asFlow","fun <T : Any> Flow.Publisher<T>.asFlow(): Flow<T>","kotlinx.coroutines.jdk9.asFlow"]},{"name":"fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Flow.Publisher<T>","description":"kotlinx.coroutines.jdk9.asPublisher","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/as-publisher.html","searchKeys":["asPublisher","fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Flow.Publisher<T>","kotlinx.coroutines.jdk9.asPublisher"]},{"name":"fun <T> flowPublish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flow.Publisher<T>","description":"kotlinx.coroutines.jdk9.flowPublish","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/flow-publish.html","searchKeys":["flowPublish","fun <T> flowPublish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flow.Publisher<T>","kotlinx.coroutines.jdk9.flowPublish"]},{"name":"inline suspend fun <T> Flow.Publisher<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.jdk9.collect","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/collect.html","searchKeys":["collect","inline suspend fun <T> Flow.Publisher<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.jdk9.collect"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirst(): T","description":"kotlinx.coroutines.jdk9.awaitFirst","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first.html","searchKeys":["awaitFirst","suspend fun <T> Flow.Publisher<T>.awaitFirst(): T","kotlinx.coroutines.jdk9.awaitFirst"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.jdk9.awaitFirstOrDefault","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> Flow.Publisher<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.jdk9.awaitFirstOrDefault"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.jdk9.awaitFirstOrElse","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> Flow.Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.jdk9.awaitFirstOrElse"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.jdk9.awaitFirstOrNull","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> Flow.Publisher<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.jdk9.awaitFirstOrNull"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitLast(): T","description":"kotlinx.coroutines.jdk9.awaitLast","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-last.html","searchKeys":["awaitLast","suspend fun <T> Flow.Publisher<T>.awaitLast(): T","kotlinx.coroutines.jdk9.awaitLast"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitSingle(): T","description":"kotlinx.coroutines.jdk9.awaitSingle","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Flow.Publisher<T>.awaitSingle(): T","kotlinx.coroutines.jdk9.awaitSingle"]},{"name":"class ReactorContext(val context: Context) : AbstractCoroutineContextElement","description":"kotlinx.coroutines.reactor.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/index.html","searchKeys":["ReactorContext","class ReactorContext(val context: Context) : AbstractCoroutineContextElement","kotlinx.coroutines.reactor.ReactorContext"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher"]},{"name":"constructor(context: Context)","description":"kotlinx.coroutines.reactor.ReactorContext.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-reactor-context.html","searchKeys":["ReactorContext","constructor(context: Context)","kotlinx.coroutines.reactor.ReactorContext.ReactorContext"]},{"name":"constructor(contextView: ContextView)","description":"kotlinx.coroutines.reactor.ReactorContext.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-reactor-context.html","searchKeys":["ReactorContext","constructor(contextView: ContextView)","kotlinx.coroutines.reactor.ReactorContext.ReactorContext"]},{"name":"constructor(scheduler: Scheduler)","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","constructor(scheduler: Scheduler)","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Flow<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","description":"kotlinx.coroutines.reactor.asFlux","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-flux.html","searchKeys":["asFlux","fun <T : Any> Flow<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","kotlinx.coroutines.reactor.asFlux"]},{"name":"fun <T> Deferred<T?>.asMono(context: CoroutineContext): Mono<T>","description":"kotlinx.coroutines.reactor.asMono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-mono.html","searchKeys":["asMono","fun <T> Deferred<T?>.asMono(context: CoroutineContext): Mono<T>","kotlinx.coroutines.reactor.asMono"]},{"name":"fun <T> flux(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flux<T>","description":"kotlinx.coroutines.reactor.flux","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/flux.html","searchKeys":["flux","fun <T> flux(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flux<T>","kotlinx.coroutines.reactor.flux"]},{"name":"fun <T> mono(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Mono<T>","description":"kotlinx.coroutines.reactor.mono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/mono.html","searchKeys":["mono","fun <T> mono(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Mono<T>","kotlinx.coroutines.reactor.mono"]},{"name":"fun ContextView.asCoroutineContext(): ReactorContext","description":"kotlinx.coroutines.reactor.asCoroutineContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-coroutine-context.html","searchKeys":["asCoroutineContext","fun ContextView.asCoroutineContext(): ReactorContext","kotlinx.coroutines.reactor.asCoroutineContext"]},{"name":"fun Job.asMono(context: CoroutineContext): Mono<Unit>","description":"kotlinx.coroutines.reactor.asMono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-mono.html","searchKeys":["asMono","fun Job.asMono(context: CoroutineContext): Mono<Unit>","kotlinx.coroutines.reactor.asMono"]},{"name":"fun Scheduler.asCoroutineDispatcher(): SchedulerCoroutineDispatcher","description":"kotlinx.coroutines.reactor.asCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): SchedulerCoroutineDispatcher","kotlinx.coroutines.reactor.asCoroutineDispatcher"]},{"name":"object Key : CoroutineContext.Key<ReactorContext> ","description":"kotlinx.coroutines.reactor.ReactorContext.Key","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<ReactorContext> ","kotlinx.coroutines.reactor.ReactorContext.Key"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.reactor.ReactorContext.toString","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.reactor.ReactorContext.toString"]},{"name":"suspend fun <T> Mono<T>.awaitSingle(): T","description":"kotlinx.coroutines.reactor.awaitSingle","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Mono<T>.awaitSingle(): T","kotlinx.coroutines.reactor.awaitSingle"]},{"name":"suspend fun <T> Mono<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.reactor.awaitSingleOrNull","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> Mono<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.reactor.awaitSingleOrNull"]},{"name":"val context: Context","description":"kotlinx.coroutines.reactor.ReactorContext.context","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/context.html","searchKeys":["context","val context: Context","kotlinx.coroutines.reactor.ReactorContext.context"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduler"]},{"name":"CREATED","description":"kotlinx.coroutines.debug.State.CREATED","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","kotlinx.coroutines.debug.State.CREATED"]},{"name":"RUNNING","description":"kotlinx.coroutines.debug.State.RUNNING","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-r-u-n-n-i-n-g/index.html","searchKeys":["RUNNING","RUNNING","kotlinx.coroutines.debug.State.RUNNING"]},{"name":"SUSPENDED","description":"kotlinx.coroutines.debug.State.SUSPENDED","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-s-u-s-p-e-n-d-e-d/index.html","searchKeys":["SUSPENDED","SUSPENDED","kotlinx.coroutines.debug.State.SUSPENDED"]},{"name":"annotation class CoroutinesTimeout(val testTimeoutMs: Long, val cancelOnTimeout: Boolean = false)","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/index.html","searchKeys":["CoroutinesTimeout","annotation class CoroutinesTimeout(val testTimeoutMs: Long, val cancelOnTimeout: Boolean = false)","kotlinx.coroutines.debug.junit5.CoroutinesTimeout"]},{"name":"class CoroutineInfo","description":"kotlinx.coroutines.debug.CoroutineInfo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/index.html","searchKeys":["CoroutineInfo","class CoroutineInfo","kotlinx.coroutines.debug.CoroutineInfo"]},{"name":"class CoroutinesBlockHoundIntegration : BlockHoundIntegration","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/index.html","searchKeys":["CoroutinesBlockHoundIntegration","class CoroutinesBlockHoundIntegration : BlockHoundIntegration","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration"]},{"name":"class CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true) : TestRule","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/index.html","searchKeys":["CoroutinesTimeout","class CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true) : TestRule","kotlinx.coroutines.debug.junit4.CoroutinesTimeout"]},{"name":"constructor()","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.CoroutinesBlockHoundIntegration","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/-coroutines-block-hound-integration.html","searchKeys":["CoroutinesBlockHoundIntegration","constructor()","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.CoroutinesBlockHoundIntegration"]},{"name":"constructor(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-coroutines-timeout.html","searchKeys":["CoroutinesTimeout","constructor(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout"]},{"name":"constructor(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true)","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-coroutines-timeout.html","searchKeys":["CoroutinesTimeout","constructor(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true)","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout"]},{"name":"enum State : Enum<State> ","description":"kotlinx.coroutines.debug.State","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/index.html","searchKeys":["State","enum State : Enum<State> ","kotlinx.coroutines.debug.State"]},{"name":"fun dumpCoroutines(out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.dumpCoroutines","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines.html","searchKeys":["dumpCoroutines","fun dumpCoroutines(out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.dumpCoroutines"]},{"name":"fun dumpCoroutinesInfo(): List<CoroutineInfo>","description":"kotlinx.coroutines.debug.DebugProbes.dumpCoroutinesInfo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines-info.html","searchKeys":["dumpCoroutinesInfo","fun dumpCoroutinesInfo(): List<CoroutineInfo>","kotlinx.coroutines.debug.DebugProbes.dumpCoroutinesInfo"]},{"name":"fun install()","description":"kotlinx.coroutines.debug.DebugProbes.install","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/install.html","searchKeys":["install","fun install()","kotlinx.coroutines.debug.DebugProbes.install"]},{"name":"fun jobToString(job: Job): String","description":"kotlinx.coroutines.debug.DebugProbes.jobToString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/job-to-string.html","searchKeys":["jobToString","fun jobToString(job: Job): String","kotlinx.coroutines.debug.DebugProbes.jobToString"]},{"name":"fun lastObservedStackTrace(): List<StackTraceElement>","description":"kotlinx.coroutines.debug.CoroutineInfo.lastObservedStackTrace","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/last-observed-stack-trace.html","searchKeys":["lastObservedStackTrace","fun lastObservedStackTrace(): List<StackTraceElement>","kotlinx.coroutines.debug.CoroutineInfo.lastObservedStackTrace"]},{"name":"fun printJob(job: Job, out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.printJob","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-job.html","searchKeys":["printJob","fun printJob(job: Job, out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.printJob"]},{"name":"fun printScope(scope: CoroutineScope, out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.printScope","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-scope.html","searchKeys":["printScope","fun printScope(scope: CoroutineScope, out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.printScope"]},{"name":"fun scopeToString(scope: CoroutineScope): String","description":"kotlinx.coroutines.debug.DebugProbes.scopeToString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/scope-to-string.html","searchKeys":["scopeToString","fun scopeToString(scope: CoroutineScope): String","kotlinx.coroutines.debug.DebugProbes.scopeToString"]},{"name":"fun seconds(seconds: Int, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/seconds.html","searchKeys":["seconds","fun seconds(seconds: Int, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds"]},{"name":"fun seconds(seconds: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/seconds.html","searchKeys":["seconds","fun seconds(seconds: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds"]},{"name":"fun uninstall()","description":"kotlinx.coroutines.debug.DebugProbes.uninstall","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/uninstall.html","searchKeys":["uninstall","fun uninstall()","kotlinx.coroutines.debug.DebugProbes.uninstall"]},{"name":"fun valueOf(value: String): State","description":"kotlinx.coroutines.debug.State.valueOf","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): State","kotlinx.coroutines.debug.State.valueOf"]},{"name":"fun values(): Array<State>","description":"kotlinx.coroutines.debug.State.values","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/values.html","searchKeys":["values","fun values(): Array<State>","kotlinx.coroutines.debug.State.values"]},{"name":"inline fun withDebugProbes(block: () -> Unit)","description":"kotlinx.coroutines.debug.DebugProbes.withDebugProbes","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/with-debug-probes.html","searchKeys":["withDebugProbes","inline fun withDebugProbes(block: () -> Unit)","kotlinx.coroutines.debug.DebugProbes.withDebugProbes"]},{"name":"object Companion","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/index.html","searchKeys":["Companion","object Companion","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion"]},{"name":"object DebugProbes","description":"kotlinx.coroutines.debug.DebugProbes","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html","searchKeys":["DebugProbes","object DebugProbes","kotlinx.coroutines.debug.DebugProbes"]},{"name":"open override fun applyTo(builder: BlockHound.Builder)","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.applyTo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/apply-to.html","searchKeys":["applyTo","open override fun applyTo(builder: BlockHound.Builder)","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.applyTo"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.debug.CoroutineInfo.toString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.debug.CoroutineInfo.toString"]},{"name":"val cancelOnTimeout: Boolean = false","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout.cancelOnTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/cancel-on-timeout.html","searchKeys":["cancelOnTimeout","val cancelOnTimeout: Boolean = false","kotlinx.coroutines.debug.junit5.CoroutinesTimeout.cancelOnTimeout"]},{"name":"val context: CoroutineContext","description":"kotlinx.coroutines.debug.CoroutineInfo.context","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/context.html","searchKeys":["context","val context: CoroutineContext","kotlinx.coroutines.debug.CoroutineInfo.context"]},{"name":"val creationStackTrace: List<StackTraceElement>","description":"kotlinx.coroutines.debug.CoroutineInfo.creationStackTrace","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/creation-stack-trace.html","searchKeys":["creationStackTrace","val creationStackTrace: List<StackTraceElement>","kotlinx.coroutines.debug.CoroutineInfo.creationStackTrace"]},{"name":"val isInstalled: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.isInstalled","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/is-installed.html","searchKeys":["isInstalled","val isInstalled: Boolean","kotlinx.coroutines.debug.DebugProbes.isInstalled"]},{"name":"val job: Job?","description":"kotlinx.coroutines.debug.CoroutineInfo.job","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/job.html","searchKeys":["job","val job: Job?","kotlinx.coroutines.debug.CoroutineInfo.job"]},{"name":"val state: State","description":"kotlinx.coroutines.debug.CoroutineInfo.state","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/state.html","searchKeys":["state","val state: State","kotlinx.coroutines.debug.CoroutineInfo.state"]},{"name":"val testTimeoutMs: Long","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout.testTimeoutMs","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/test-timeout-ms.html","searchKeys":["testTimeoutMs","val testTimeoutMs: Long","kotlinx.coroutines.debug.junit5.CoroutinesTimeout.testTimeoutMs"]},{"name":"var enableCreationStackTraces: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.enableCreationStackTraces","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/enable-creation-stack-traces.html","searchKeys":["enableCreationStackTraces","var enableCreationStackTraces: Boolean","kotlinx.coroutines.debug.DebugProbes.enableCreationStackTraces"]},{"name":"var sanitizeStackTraces: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.sanitizeStackTraces","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/sanitize-stack-traces.html","searchKeys":["sanitizeStackTraces","var sanitizeStackTraces: Boolean","kotlinx.coroutines.debug.DebugProbes.sanitizeStackTraces"]},{"name":"fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): ListenableFuture<T>","description":"kotlinx.coroutines.guava.future","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/future.html","searchKeys":["future","fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): ListenableFuture<T>","kotlinx.coroutines.guava.future"]},{"name":"fun <T> Deferred<T>.asListenableFuture(): ListenableFuture<T>","description":"kotlinx.coroutines.guava.asListenableFuture","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/as-listenable-future.html","searchKeys":["asListenableFuture","fun <T> Deferred<T>.asListenableFuture(): ListenableFuture<T>","kotlinx.coroutines.guava.asListenableFuture"]},{"name":"fun <T> ListenableFuture<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.guava.asDeferred","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/as-deferred.html","searchKeys":["asDeferred","fun <T> ListenableFuture<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.guava.asDeferred"]},{"name":"suspend fun <T> ListenableFuture<T>.await(): T","description":"kotlinx.coroutines.guava.await","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/await.html","searchKeys":["await","suspend fun <T> ListenableFuture<T>.await(): T","kotlinx.coroutines.guava.await"]},{"name":"abstract class TestDispatcher : CoroutineDispatcher, Delay, DelayWithTimeoutDiagnostics","description":"kotlinx.coroutines.test.TestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/index.html","searchKeys":["TestDispatcher","abstract class TestDispatcher : CoroutineDispatcher, Delay, DelayWithTimeoutDiagnostics","kotlinx.coroutines.test.TestDispatcher"]},{"name":"abstract fun advanceTimeBy(delayTimeMillis: Long): Long","description":"kotlinx.coroutines.test.DelayController.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/advance-time-by.html","searchKeys":["advanceTimeBy","abstract fun advanceTimeBy(delayTimeMillis: Long): Long","kotlinx.coroutines.test.DelayController.advanceTimeBy"]},{"name":"abstract fun advanceUntilIdle(): Long","description":"kotlinx.coroutines.test.DelayController.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/advance-until-idle.html","searchKeys":["advanceUntilIdle","abstract fun advanceUntilIdle(): Long","kotlinx.coroutines.test.DelayController.advanceUntilIdle"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.DelayController.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.DelayController.cleanupTestCoroutines"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.TestCoroutineScope.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.TestCoroutineScope.cleanupTestCoroutines"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.UncaughtExceptionCaptor.cleanupTestCoroutines"]},{"name":"abstract fun pauseDispatcher()","description":"kotlinx.coroutines.test.DelayController.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/pause-dispatcher.html","searchKeys":["pauseDispatcher","abstract fun pauseDispatcher()","kotlinx.coroutines.test.DelayController.pauseDispatcher"]},{"name":"abstract fun resumeDispatcher()","description":"kotlinx.coroutines.test.DelayController.resumeDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/resume-dispatcher.html","searchKeys":["resumeDispatcher","abstract fun resumeDispatcher()","kotlinx.coroutines.test.DelayController.resumeDispatcher"]},{"name":"abstract fun runCurrent()","description":"kotlinx.coroutines.test.DelayController.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/run-current.html","searchKeys":["runCurrent","abstract fun runCurrent()","kotlinx.coroutines.test.DelayController.runCurrent"]},{"name":"abstract suspend fun pauseDispatcher(block: suspend () -> Unit)","description":"kotlinx.coroutines.test.DelayController.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/pause-dispatcher.html","searchKeys":["pauseDispatcher","abstract suspend fun pauseDispatcher(block: suspend () -> Unit)","kotlinx.coroutines.test.DelayController.pauseDispatcher"]},{"name":"abstract val backgroundScope: CoroutineScope","description":"kotlinx.coroutines.test.TestScope.backgroundScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/background-scope.html","searchKeys":["backgroundScope","abstract val backgroundScope: CoroutineScope","kotlinx.coroutines.test.TestScope.backgroundScope"]},{"name":"abstract val currentTime: Long","description":"kotlinx.coroutines.test.DelayController.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/current-time.html","searchKeys":["currentTime","abstract val currentTime: Long","kotlinx.coroutines.test.DelayController.currentTime"]},{"name":"abstract val scheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestDispatcher.scheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/scheduler.html","searchKeys":["scheduler","abstract val scheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestDispatcher.scheduler"]},{"name":"abstract val testScheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestCoroutineScope.testScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/test-scheduler.html","searchKeys":["testScheduler","abstract val testScheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestCoroutineScope.testScheduler"]},{"name":"abstract val testScheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestScope.testScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/test-scheduler.html","searchKeys":["testScheduler","abstract val testScheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestScope.testScheduler"]},{"name":"abstract val uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","abstract val uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.UncaughtExceptionCaptor.uncaughtExceptions"]},{"name":"class TestCoroutineDispatcher(val scheduler: TestCoroutineScheduler = TestCoroutineScheduler()) : TestDispatcher, Delay, SchedulerAsDelayController","description":"kotlinx.coroutines.test.TestCoroutineDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/index.html","searchKeys":["TestCoroutineDispatcher","class TestCoroutineDispatcher(val scheduler: TestCoroutineScheduler = TestCoroutineScheduler()) : TestDispatcher, Delay, SchedulerAsDelayController","kotlinx.coroutines.test.TestCoroutineDispatcher"]},{"name":"class TestCoroutineExceptionHandler : AbstractCoroutineContextElement, CoroutineExceptionHandler, UncaughtExceptionCaptor","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/index.html","searchKeys":["TestCoroutineExceptionHandler","class TestCoroutineExceptionHandler : AbstractCoroutineContextElement, CoroutineExceptionHandler, UncaughtExceptionCaptor","kotlinx.coroutines.test.TestCoroutineExceptionHandler"]},{"name":"class TestCoroutineScheduler : AbstractCoroutineContextElement, CoroutineContext.Element","description":"kotlinx.coroutines.test.TestCoroutineScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/index.html","searchKeys":["TestCoroutineScheduler","class TestCoroutineScheduler : AbstractCoroutineContextElement, CoroutineContext.Element","kotlinx.coroutines.test.TestCoroutineScheduler"]},{"name":"constructor()","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.TestCoroutineExceptionHandler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/-test-coroutine-exception-handler.html","searchKeys":["TestCoroutineExceptionHandler","constructor()","kotlinx.coroutines.test.TestCoroutineExceptionHandler.TestCoroutineExceptionHandler"]},{"name":"constructor()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.TestCoroutineScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/-test-coroutine-scheduler.html","searchKeys":["TestCoroutineScheduler","constructor()","kotlinx.coroutines.test.TestCoroutineScheduler.TestCoroutineScheduler"]},{"name":"constructor(scheduler: TestCoroutineScheduler = TestCoroutineScheduler())","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.TestCoroutineDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/-test-coroutine-dispatcher.html","searchKeys":["TestCoroutineDispatcher","constructor(scheduler: TestCoroutineScheduler = TestCoroutineScheduler())","kotlinx.coroutines.test.TestCoroutineDispatcher.TestCoroutineDispatcher"]},{"name":"expect class TestResult","description":"kotlinx.coroutines.test.TestResult","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-result/index.html","searchKeys":["TestResult","expect class TestResult","kotlinx.coroutines.test.TestResult"]},{"name":"fun Dispatchers.resetMain()","description":"kotlinx.coroutines.test.resetMain","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/reset-main.html","searchKeys":["resetMain","fun Dispatchers.resetMain()","kotlinx.coroutines.test.resetMain"]},{"name":"fun Dispatchers.setMain(dispatcher: CoroutineDispatcher)","description":"kotlinx.coroutines.test.setMain","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/set-main.html","searchKeys":["setMain","fun Dispatchers.setMain(dispatcher: CoroutineDispatcher)","kotlinx.coroutines.test.setMain"]},{"name":"fun StandardTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","description":"kotlinx.coroutines.test.StandardTestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-standard-test-dispatcher.html","searchKeys":["StandardTestDispatcher","fun StandardTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","kotlinx.coroutines.test.StandardTestDispatcher"]},{"name":"fun TestCoroutineDispatcher.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestCoroutineDispatcher.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","description":"kotlinx.coroutines.test.TestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope.html","searchKeys":["TestCoroutineScope","fun TestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","kotlinx.coroutines.test.TestCoroutineScope"]},{"name":"fun TestCoroutineScope.advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-time-by.html","searchKeys":["advanceTimeBy","fun TestCoroutineScope.advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.advanceTimeBy"]},{"name":"fun TestCoroutineScope.advanceUntilIdle()","description":"kotlinx.coroutines.test.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun TestCoroutineScope.advanceUntilIdle()","kotlinx.coroutines.test.advanceUntilIdle"]},{"name":"fun TestCoroutineScope.pauseDispatcher()","description":"kotlinx.coroutines.test.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/pause-dispatcher.html","searchKeys":["pauseDispatcher","fun TestCoroutineScope.pauseDispatcher()","kotlinx.coroutines.test.pauseDispatcher"]},{"name":"fun TestCoroutineScope.resumeDispatcher()","description":"kotlinx.coroutines.test.resumeDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/resume-dispatcher.html","searchKeys":["resumeDispatcher","fun TestCoroutineScope.resumeDispatcher()","kotlinx.coroutines.test.resumeDispatcher"]},{"name":"fun TestCoroutineScope.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestCoroutineScope.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestCoroutineScope.runCurrent()","description":"kotlinx.coroutines.test.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-current.html","searchKeys":["runCurrent","fun TestCoroutineScope.runCurrent()","kotlinx.coroutines.test.runCurrent"]},{"name":"fun TestCoroutineScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, block: suspend TestCoroutineScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun TestCoroutineScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, block: suspend TestCoroutineScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun TestScope(context: CoroutineContext = EmptyCoroutineContext): TestScope","description":"kotlinx.coroutines.test.TestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope.html","searchKeys":["TestScope","fun TestScope(context: CoroutineContext = EmptyCoroutineContext): TestScope","kotlinx.coroutines.test.TestScope"]},{"name":"fun TestScope.advanceTimeBy(delayTime: Duration)","description":"kotlinx.coroutines.test.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-time-by.html","searchKeys":["advanceTimeBy","fun TestScope.advanceTimeBy(delayTime: Duration)","kotlinx.coroutines.test.advanceTimeBy"]},{"name":"fun TestScope.advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-time-by.html","searchKeys":["advanceTimeBy","fun TestScope.advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.advanceTimeBy"]},{"name":"fun TestScope.advanceUntilIdle()","description":"kotlinx.coroutines.test.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun TestScope.advanceUntilIdle()","kotlinx.coroutines.test.advanceUntilIdle"]},{"name":"fun TestScope.runBlockingTest(block: suspend TestScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestScope.runBlockingTest(block: suspend TestScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestScope.runCurrent()","description":"kotlinx.coroutines.test.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-current.html","searchKeys":["runCurrent","fun TestScope.runCurrent()","kotlinx.coroutines.test.runCurrent"]},{"name":"fun TestScope.runTest(dispatchTimeoutMs: Long, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun TestScope.runTest(dispatchTimeoutMs: Long, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun TestScope.runTest(timeout: Duration = DEFAULT_TIMEOUT, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun TestScope.runTest(timeout: Duration = DEFAULT_TIMEOUT, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun UnconfinedTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","description":"kotlinx.coroutines.test.UnconfinedTestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-unconfined-test-dispatcher.html","searchKeys":["UnconfinedTestDispatcher","fun UnconfinedTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","kotlinx.coroutines.test.UnconfinedTestDispatcher"]},{"name":"fun advanceTimeBy(delayTime: Duration)","description":"kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/advance-time-by.html","searchKeys":["advanceTimeBy","fun advanceTimeBy(delayTime: Duration)","kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy"]},{"name":"fun advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/advance-time-by.html","searchKeys":["advanceTimeBy","fun advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy"]},{"name":"fun advanceUntilIdle()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun advanceUntilIdle()","kotlinx.coroutines.test.TestCoroutineScheduler.advanceUntilIdle"]},{"name":"fun createTestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","description":"kotlinx.coroutines.test.createTestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/create-test-coroutine-scope.html","searchKeys":["createTestCoroutineScope","fun createTestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","kotlinx.coroutines.test.createTestCoroutineScope"]},{"name":"fun runBlockingTest(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun runBlockingTest(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun runBlockingTestOnTestScope(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTestOnTestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test-on-test-scope.html","searchKeys":["runBlockingTestOnTestScope","fun runBlockingTestOnTestScope(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTestOnTestScope"]},{"name":"fun runCurrent()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/run-current.html","searchKeys":["runCurrent","fun runCurrent()","kotlinx.coroutines.test.TestCoroutineScheduler.runCurrent"]},{"name":"fun runTest(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun runTest(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun runTest(context: CoroutineContext = EmptyCoroutineContext, timeout: Duration = DEFAULT_TIMEOUT, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun runTest(context: CoroutineContext = EmptyCoroutineContext, timeout: Duration = DEFAULT_TIMEOUT, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun runTestWithLegacyScope(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runTestWithLegacyScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test-with-legacy-scope.html","searchKeys":["runTestWithLegacyScope","fun runTestWithLegacyScope(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runTestWithLegacyScope"]},{"name":"interface DelayController","description":"kotlinx.coroutines.test.DelayController","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/index.html","searchKeys":["DelayController","interface DelayController","kotlinx.coroutines.test.DelayController"]},{"name":"interface TestCoroutineScope : CoroutineScope","description":"kotlinx.coroutines.test.TestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html","searchKeys":["TestCoroutineScope","interface TestCoroutineScope : CoroutineScope","kotlinx.coroutines.test.TestCoroutineScope"]},{"name":"interface TestScope : CoroutineScope","description":"kotlinx.coroutines.test.TestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/index.html","searchKeys":["TestScope","interface TestScope : CoroutineScope","kotlinx.coroutines.test.TestScope"]},{"name":"interface UncaughtExceptionCaptor","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/index.html","searchKeys":["UncaughtExceptionCaptor","interface UncaughtExceptionCaptor","kotlinx.coroutines.test.UncaughtExceptionCaptor"]},{"name":"open override fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","open override fun cleanupTestCoroutines()","kotlinx.coroutines.test.TestCoroutineExceptionHandler.cleanupTestCoroutines"]},{"name":"open override fun handleException(context: CoroutineContext, exception: Throwable)","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.handleException","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/handle-exception.html","searchKeys":["handleException","open override fun handleException(context: CoroutineContext, exception: Throwable)","kotlinx.coroutines.test.TestCoroutineExceptionHandler.handleException"]},{"name":"open override val scheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","open override val scheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestCoroutineDispatcher.scheduler"]},{"name":"open override val uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","open override val uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.TestCoroutineExceptionHandler.uncaughtExceptions"]},{"name":"suspend fun TestCoroutineScope.pauseDispatcher(block: suspend () -> Unit)","description":"kotlinx.coroutines.test.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/pause-dispatcher.html","searchKeys":["pauseDispatcher","suspend fun TestCoroutineScope.pauseDispatcher(block: suspend () -> Unit)","kotlinx.coroutines.test.pauseDispatcher"]},{"name":"val TestCoroutineScope.currentTime: Long","description":"kotlinx.coroutines.test.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/current-time.html","searchKeys":["currentTime","val TestCoroutineScope.currentTime: Long","kotlinx.coroutines.test.currentTime"]},{"name":"val TestCoroutineScope.uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","val TestCoroutineScope.uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.uncaughtExceptions"]},{"name":"val TestScope.currentTime: Long","description":"kotlinx.coroutines.test.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/current-time.html","searchKeys":["currentTime","val TestScope.currentTime: Long","kotlinx.coroutines.test.currentTime"]},{"name":"val TestScope.testTimeSource: TimeSource.WithComparableMarks","description":"kotlinx.coroutines.test.testTimeSource","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/test-time-source.html","searchKeys":["testTimeSource","val TestScope.testTimeSource: TimeSource.WithComparableMarks","kotlinx.coroutines.test.testTimeSource"]},{"name":"val timeSource: TimeSource.WithComparableMarks","description":"kotlinx.coroutines.test.TestCoroutineScheduler.timeSource","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/time-source.html","searchKeys":["timeSource","val timeSource: TimeSource.WithComparableMarks","kotlinx.coroutines.test.TestCoroutineScheduler.timeSource"]},{"name":"var currentTime: Long","description":"kotlinx.coroutines.test.TestCoroutineScheduler.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/current-time.html","searchKeys":["currentTime","var currentTime: Long","kotlinx.coroutines.test.TestCoroutineScheduler.currentTime"]},{"name":"sealed class SwingDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.swing.SwingDispatcher","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing-dispatcher/index.html","searchKeys":["SwingDispatcher","sealed class SwingDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.swing.SwingDispatcher"]},{"name":"val Dispatchers.Swing: SwingDispatcher","description":"kotlinx.coroutines.swing.Swing","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing.html","searchKeys":["Swing","val Dispatchers.Swing: SwingDispatcher","kotlinx.coroutines.swing.Swing"]},{"name":"class MDCContext(val contextMap: MDCContextMap = MDC.getCopyOfContextMap()) : AbstractCoroutineContextElement, ThreadContextElement<MDCContextMap> ","description":"kotlinx.coroutines.slf4j.MDCContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/index.html","searchKeys":["MDCContext","class MDCContext(val contextMap: MDCContextMap = MDC.getCopyOfContextMap()) : AbstractCoroutineContextElement, ThreadContextElement<MDCContextMap> ","kotlinx.coroutines.slf4j.MDCContext"]},{"name":"constructor(contextMap: MDCContextMap = MDC.getCopyOfContextMap())","description":"kotlinx.coroutines.slf4j.MDCContext.MDCContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/-m-d-c-context.html","searchKeys":["MDCContext","constructor(contextMap: MDCContextMap = MDC.getCopyOfContextMap())","kotlinx.coroutines.slf4j.MDCContext.MDCContext"]},{"name":"object Key : CoroutineContext.Key<MDCContext> ","description":"kotlinx.coroutines.slf4j.MDCContext.Key","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<MDCContext> ","kotlinx.coroutines.slf4j.MDCContext.Key"]},{"name":"val contextMap: MDCContextMap","description":"kotlinx.coroutines.slf4j.MDCContext.contextMap","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/context-map.html","searchKeys":["contextMap","val contextMap: MDCContextMap","kotlinx.coroutines.slf4j.MDCContext.contextMap"]},{"name":"abstract override val immediate: HandlerDispatcher","description":"kotlinx.coroutines.android.HandlerDispatcher.immediate","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/-handler-dispatcher/immediate.html","searchKeys":["immediate","abstract override val immediate: HandlerDispatcher","kotlinx.coroutines.android.HandlerDispatcher.immediate"]},{"name":"fun Handler.asCoroutineDispatcher(name: String? = null): HandlerDispatcher","description":"kotlinx.coroutines.android.asCoroutineDispatcher","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Handler.asCoroutineDispatcher(name: String? = null): HandlerDispatcher","kotlinx.coroutines.android.asCoroutineDispatcher"]},{"name":"sealed class HandlerDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.android.HandlerDispatcher","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/-handler-dispatcher/index.html","searchKeys":["HandlerDispatcher","sealed class HandlerDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.android.HandlerDispatcher"]},{"name":"suspend fun awaitFrame(): Long","description":"kotlinx.coroutines.android.awaitFrame","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/await-frame.html","searchKeys":["awaitFrame","suspend fun awaitFrame(): Long","kotlinx.coroutines.android.awaitFrame"]},{"name":"fun <T> ObservableValue<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.javafx.asFlow","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/as-flow.html","searchKeys":["asFlow","fun <T> ObservableValue<T>.asFlow(): Flow<T>","kotlinx.coroutines.javafx.asFlow"]},{"name":"sealed class JavaFxDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.javafx.JavaFxDispatcher","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx-dispatcher/index.html","searchKeys":["JavaFxDispatcher","sealed class JavaFxDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.javafx.JavaFxDispatcher"]},{"name":"suspend fun awaitPulse(): Long","description":"kotlinx.coroutines.javafx.awaitPulse","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/await-pulse.html","searchKeys":["awaitPulse","suspend fun awaitPulse(): Long","kotlinx.coroutines.javafx.awaitPulse"]},{"name":"val Dispatchers.JavaFx: JavaFxDispatcher","description":"kotlinx.coroutines.javafx.JavaFx","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx.html","searchKeys":["JavaFx","val Dispatchers.JavaFx: JavaFxDispatcher","kotlinx.coroutines.javafx.JavaFx"]},{"name":"fun <T> Deferred<T>.asTask(): Task<T>","description":"kotlinx.coroutines.tasks.asTask","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-task.html","searchKeys":["asTask","fun <T> Deferred<T>.asTask(): Task<T>","kotlinx.coroutines.tasks.asTask"]},{"name":"fun <T> Task<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.tasks.asDeferred","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-deferred.html","searchKeys":["asDeferred","fun <T> Task<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.tasks.asDeferred"]},{"name":"fun <T> Task<T>.asDeferred(cancellationTokenSource: CancellationTokenSource): Deferred<T>","description":"kotlinx.coroutines.tasks.asDeferred","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-deferred.html","searchKeys":["asDeferred","fun <T> Task<T>.asDeferred(cancellationTokenSource: CancellationTokenSource): Deferred<T>","kotlinx.coroutines.tasks.asDeferred"]},{"name":"suspend fun <T> Task<T>.await(): T","description":"kotlinx.coroutines.tasks.await","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html","searchKeys":["await","suspend fun <T> Task<T>.await(): T","kotlinx.coroutines.tasks.await"]},{"name":"suspend fun <T> Task<T>.await(cancellationTokenSource: CancellationTokenSource): T","description":"kotlinx.coroutines.tasks.await","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html","searchKeys":["await","suspend fun <T> Task<T>.await(cancellationTokenSource: CancellationTokenSource): T","kotlinx.coroutines.tasks.await"]},{"name":"ATOMIC","description":"kotlinx.coroutines.CoroutineStart.ATOMIC","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-a-t-o-m-i-c/index.html","searchKeys":["ATOMIC","ATOMIC","kotlinx.coroutines.CoroutineStart.ATOMIC"]},{"name":"DEFAULT","description":"kotlinx.coroutines.CoroutineStart.DEFAULT","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-d-e-f-a-u-l-t/index.html","searchKeys":["DEFAULT","DEFAULT","kotlinx.coroutines.CoroutineStart.DEFAULT"]},{"name":"DROP_LATEST","description":"kotlinx.coroutines.channels.BufferOverflow.DROP_LATEST","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-l-a-t-e-s-t/index.html","searchKeys":["DROP_LATEST","DROP_LATEST","kotlinx.coroutines.channels.BufferOverflow.DROP_LATEST"]},{"name":"DROP_OLDEST","description":"kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-o-l-d-e-s-t/index.html","searchKeys":["DROP_OLDEST","DROP_OLDEST","kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST"]},{"name":"FIXED_DELAY","description":"kotlinx.coroutines.channels.TickerMode.FIXED_DELAY","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-d-e-l-a-y/index.html","searchKeys":["FIXED_DELAY","FIXED_DELAY","kotlinx.coroutines.channels.TickerMode.FIXED_DELAY"]},{"name":"FIXED_PERIOD","description":"kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-p-e-r-i-o-d/index.html","searchKeys":["FIXED_PERIOD","FIXED_PERIOD","kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD"]},{"name":"LAZY","description":"kotlinx.coroutines.CoroutineStart.LAZY","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-l-a-z-y/index.html","searchKeys":["LAZY","LAZY","kotlinx.coroutines.CoroutineStart.LAZY"]},{"name":"START","description":"kotlinx.coroutines.flow.SharingCommand.START","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-a-r-t/index.html","searchKeys":["START","START","kotlinx.coroutines.flow.SharingCommand.START"]},{"name":"STOP","description":"kotlinx.coroutines.flow.SharingCommand.STOP","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-o-p/index.html","searchKeys":["STOP","STOP","kotlinx.coroutines.flow.SharingCommand.STOP"]},{"name":"STOP_AND_RESET_REPLAY_CACHE","description":"kotlinx.coroutines.flow.SharingCommand.STOP_AND_RESET_REPLAY_CACHE","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-o-p_-a-n-d_-r-e-s-e-t_-r-e-p-l-a-y_-c-a-c-h-e/index.html","searchKeys":["STOP_AND_RESET_REPLAY_CACHE","STOP_AND_RESET_REPLAY_CACHE","kotlinx.coroutines.flow.SharingCommand.STOP_AND_RESET_REPLAY_CACHE"]},{"name":"SUSPEND","description":"kotlinx.coroutines.channels.BufferOverflow.SUSPEND","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-s-u-s-p-e-n-d/index.html","searchKeys":["SUSPEND","SUSPEND","kotlinx.coroutines.channels.BufferOverflow.SUSPEND"]},{"name":"UNDISPATCHED","description":"kotlinx.coroutines.CoroutineStart.UNDISPATCHED","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-u-n-d-i-s-p-a-t-c-h-e-d/index.html","searchKeys":["UNDISPATCHED","UNDISPATCHED","kotlinx.coroutines.CoroutineStart.UNDISPATCHED"]},{"name":"abstract class AbstractFlow<T> : Flow<T> , CancellableFlow<T> ","description":"kotlinx.coroutines.flow.AbstractFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/index.html","searchKeys":["AbstractFlow","abstract class AbstractFlow<T> : Flow<T> , CancellableFlow<T> ","kotlinx.coroutines.flow.AbstractFlow"]},{"name":"abstract class CoroutineDispatcher : AbstractCoroutineContextElement, ContinuationInterceptor","description":"kotlinx.coroutines.CoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html","searchKeys":["CoroutineDispatcher","abstract class CoroutineDispatcher : AbstractCoroutineContextElement, ContinuationInterceptor","kotlinx.coroutines.CoroutineDispatcher"]},{"name":"abstract class ExecutorCoroutineDispatcher : CoroutineDispatcher, Closeable","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/index.html","searchKeys":["ExecutorCoroutineDispatcher","abstract class ExecutorCoroutineDispatcher : CoroutineDispatcher, Closeable","kotlinx.coroutines.ExecutorCoroutineDispatcher"]},{"name":"abstract class MainCoroutineDispatcher : CoroutineDispatcher","description":"kotlinx.coroutines.MainCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/index.html","searchKeys":["MainCoroutineDispatcher","abstract class MainCoroutineDispatcher : CoroutineDispatcher","kotlinx.coroutines.MainCoroutineDispatcher"]},{"name":"abstract fun CoroutineDispatcher.resumeUndispatched(value: T)","description":"kotlinx.coroutines.CancellableContinuation.resumeUndispatched","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume-undispatched.html","searchKeys":["resumeUndispatched","abstract fun CoroutineDispatcher.resumeUndispatched(value: T)","kotlinx.coroutines.CancellableContinuation.resumeUndispatched"]},{"name":"abstract fun CoroutineDispatcher.resumeUndispatchedWithException(exception: Throwable)","description":"kotlinx.coroutines.CancellableContinuation.resumeUndispatchedWithException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume-undispatched-with-exception.html","searchKeys":["resumeUndispatchedWithException","abstract fun CoroutineDispatcher.resumeUndispatchedWithException(exception: Throwable)","kotlinx.coroutines.CancellableContinuation.resumeUndispatchedWithException"]},{"name":"abstract fun cancel(cause: CancellationException? = null)","description":"kotlinx.coroutines.Job.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)","kotlinx.coroutines.Job.cancel"]},{"name":"abstract fun cancel(cause: CancellationException? = null)","description":"kotlinx.coroutines.channels.BroadcastChannel.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)","kotlinx.coroutines.channels.BroadcastChannel.cancel"]},{"name":"abstract fun cancel(cause: CancellationException? = null)","description":"kotlinx.coroutines.channels.ReceiveChannel.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)","kotlinx.coroutines.channels.ReceiveChannel.cancel"]},{"name":"abstract fun cancel(cause: Throwable? = null): Boolean","description":"kotlinx.coroutines.CancellableContinuation.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: Throwable? = null): Boolean","kotlinx.coroutines.CancellableContinuation.cancel"]},{"name":"abstract fun close(cause: Throwable? = null): Boolean","description":"kotlinx.coroutines.channels.SendChannel.close","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html","searchKeys":["close","abstract fun close(cause: Throwable? = null): Boolean","kotlinx.coroutines.channels.SendChannel.close"]},{"name":"abstract fun command(subscriptionCount: StateFlow<Int>): Flow<SharingCommand>","description":"kotlinx.coroutines.flow.SharingStarted.command","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/command.html","searchKeys":["command","abstract fun command(subscriptionCount: StateFlow<Int>): Flow<SharingCommand>","kotlinx.coroutines.flow.SharingStarted.command"]},{"name":"abstract fun compareAndSet(expect: T, update: T): Boolean","description":"kotlinx.coroutines.flow.MutableStateFlow.compareAndSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/compare-and-set.html","searchKeys":["compareAndSet","abstract fun compareAndSet(expect: T, update: T): Boolean","kotlinx.coroutines.flow.MutableStateFlow.compareAndSet"]},{"name":"abstract fun complete(): Boolean","description":"kotlinx.coroutines.CompletableJob.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/complete.html","searchKeys":["complete","abstract fun complete(): Boolean","kotlinx.coroutines.CompletableJob.complete"]},{"name":"abstract fun complete(value: T): Boolean","description":"kotlinx.coroutines.CompletableDeferred.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/complete.html","searchKeys":["complete","abstract fun complete(value: T): Boolean","kotlinx.coroutines.CompletableDeferred.complete"]},{"name":"abstract fun completeExceptionally(exception: Throwable): Boolean","description":"kotlinx.coroutines.CompletableDeferred.completeExceptionally","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/complete-exceptionally.html","searchKeys":["completeExceptionally","abstract fun completeExceptionally(exception: Throwable): Boolean","kotlinx.coroutines.CompletableDeferred.completeExceptionally"]},{"name":"abstract fun completeExceptionally(exception: Throwable): Boolean","description":"kotlinx.coroutines.CompletableJob.completeExceptionally","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/complete-exceptionally.html","searchKeys":["completeExceptionally","abstract fun completeExceptionally(exception: Throwable): Boolean","kotlinx.coroutines.CompletableJob.completeExceptionally"]},{"name":"abstract fun copyForChild(): CopyableThreadContextElement<S>","description":"kotlinx.coroutines.CopyableThreadContextElement.copyForChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/copy-for-child.html","searchKeys":["copyForChild","abstract fun copyForChild(): CopyableThreadContextElement<S>","kotlinx.coroutines.CopyableThreadContextElement.copyForChild"]},{"name":"abstract fun createCopy(): T?","description":"kotlinx.coroutines.CopyableThrowable.createCopy","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-throwable/create-copy.html","searchKeys":["createCopy","abstract fun createCopy(): T?","kotlinx.coroutines.CopyableThrowable.createCopy"]},{"name":"abstract fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.CoroutineDispatcher.dispatch","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","abstract fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.CoroutineDispatcher.dispatch"]},{"name":"abstract fun dispose()","description":"kotlinx.coroutines.DisposableHandle.dispose","location":"kotlinx-coroutines-core/kotlinx.coroutines/-disposable-handle/dispose.html","searchKeys":["dispose","abstract fun dispose()","kotlinx.coroutines.DisposableHandle.dispose"]},{"name":"abstract fun getCompleted(): T","description":"kotlinx.coroutines.Deferred.getCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/get-completed.html","searchKeys":["getCompleted","abstract fun getCompleted(): T","kotlinx.coroutines.Deferred.getCompleted"]},{"name":"abstract fun getCompletionExceptionOrNull(): Throwable?","description":"kotlinx.coroutines.Deferred.getCompletionExceptionOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/get-completion-exception-or-null.html","searchKeys":["getCompletionExceptionOrNull","abstract fun getCompletionExceptionOrNull(): Throwable?","kotlinx.coroutines.Deferred.getCompletionExceptionOrNull"]},{"name":"abstract fun handleException(context: CoroutineContext, exception: Throwable)","description":"kotlinx.coroutines.CoroutineExceptionHandler.handleException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/handle-exception.html","searchKeys":["handleException","abstract fun handleException(context: CoroutineContext, exception: Throwable)","kotlinx.coroutines.CoroutineExceptionHandler.handleException"]},{"name":"abstract fun holdsLock(owner: Any): Boolean","description":"kotlinx.coroutines.sync.Mutex.holdsLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/holds-lock.html","searchKeys":["holdsLock","abstract fun holdsLock(owner: Any): Boolean","kotlinx.coroutines.sync.Mutex.holdsLock"]},{"name":"abstract fun invokeOnCancellation(handler: CompletionHandler)","description":"kotlinx.coroutines.CancellableContinuation.invokeOnCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/invoke-on-cancellation.html","searchKeys":["invokeOnCancellation","abstract fun invokeOnCancellation(handler: CompletionHandler)","kotlinx.coroutines.CancellableContinuation.invokeOnCancellation"]},{"name":"abstract fun invokeOnClose(handler: (cause: Throwable?) -> Unit)","description":"kotlinx.coroutines.channels.SendChannel.invokeOnClose","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/invoke-on-close.html","searchKeys":["invokeOnClose","abstract fun invokeOnClose(handler: (cause: Throwable?) -> Unit)","kotlinx.coroutines.channels.SendChannel.invokeOnClose"]},{"name":"abstract fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle","description":"kotlinx.coroutines.Job.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/invoke-on-completion.html","searchKeys":["invokeOnCompletion","abstract fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle","kotlinx.coroutines.Job.invokeOnCompletion"]},{"name":"abstract fun mergeForChild(overwritingElement: CoroutineContext.Element): CoroutineContext","description":"kotlinx.coroutines.CopyableThreadContextElement.mergeForChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/merge-for-child.html","searchKeys":["mergeForChild","abstract fun mergeForChild(overwritingElement: CoroutineContext.Element): CoroutineContext","kotlinx.coroutines.CopyableThreadContextElement.mergeForChild"]},{"name":"abstract fun openSubscription(): ReceiveChannel<E>","description":"kotlinx.coroutines.channels.BroadcastChannel.openSubscription","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/open-subscription.html","searchKeys":["openSubscription","abstract fun openSubscription(): ReceiveChannel<E>","kotlinx.coroutines.channels.BroadcastChannel.openSubscription"]},{"name":"abstract fun release()","description":"kotlinx.coroutines.sync.Semaphore.release","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/release.html","searchKeys":["release","abstract fun release()","kotlinx.coroutines.sync.Semaphore.release"]},{"name":"abstract fun resetReplayCache()","description":"kotlinx.coroutines.flow.MutableSharedFlow.resetReplayCache","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/reset-replay-cache.html","searchKeys":["resetReplayCache","abstract fun resetReplayCache()","kotlinx.coroutines.flow.MutableSharedFlow.resetReplayCache"]},{"name":"abstract fun restoreThreadContext(context: CoroutineContext, oldState: S)","description":"kotlinx.coroutines.ThreadContextElement.restoreThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/restore-thread-context.html","searchKeys":["restoreThreadContext","abstract fun restoreThreadContext(context: CoroutineContext, oldState: S)","kotlinx.coroutines.ThreadContextElement.restoreThreadContext"]},{"name":"abstract fun resume(value: T, onCancellation: (cause: Throwable) -> Unit?)","description":"kotlinx.coroutines.CancellableContinuation.resume","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume.html","searchKeys":["resume","abstract fun resume(value: T, onCancellation: (cause: Throwable) -> Unit?)","kotlinx.coroutines.CancellableContinuation.resume"]},{"name":"abstract fun start(): Boolean","description":"kotlinx.coroutines.Job.start","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html","searchKeys":["start","abstract fun start(): Boolean","kotlinx.coroutines.Job.start"]},{"name":"abstract fun tryAcquire(): Boolean","description":"kotlinx.coroutines.sync.Semaphore.tryAcquire","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/try-acquire.html","searchKeys":["tryAcquire","abstract fun tryAcquire(): Boolean","kotlinx.coroutines.sync.Semaphore.tryAcquire"]},{"name":"abstract fun tryEmit(value: T): Boolean","description":"kotlinx.coroutines.flow.MutableSharedFlow.tryEmit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/try-emit.html","searchKeys":["tryEmit","abstract fun tryEmit(value: T): Boolean","kotlinx.coroutines.flow.MutableSharedFlow.tryEmit"]},{"name":"abstract fun tryLock(owner: Any? = null): Boolean","description":"kotlinx.coroutines.sync.Mutex.tryLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/try-lock.html","searchKeys":["tryLock","abstract fun tryLock(owner: Any? = null): Boolean","kotlinx.coroutines.sync.Mutex.tryLock"]},{"name":"abstract fun tryReceive(): ChannelResult<E>","description":"kotlinx.coroutines.channels.ReceiveChannel.tryReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/try-receive.html","searchKeys":["tryReceive","abstract fun tryReceive(): ChannelResult<E>","kotlinx.coroutines.channels.ReceiveChannel.tryReceive"]},{"name":"abstract fun trySend(element: E): ChannelResult<Unit>","description":"kotlinx.coroutines.channels.SendChannel.trySend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/try-send.html","searchKeys":["trySend","abstract fun trySend(element: E): ChannelResult<Unit>","kotlinx.coroutines.channels.SendChannel.trySend"]},{"name":"abstract fun unlock(owner: Any? = null)","description":"kotlinx.coroutines.sync.Mutex.unlock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html","searchKeys":["unlock","abstract fun unlock(owner: Any? = null)","kotlinx.coroutines.sync.Mutex.unlock"]},{"name":"abstract fun updateThreadContext(context: CoroutineContext): S","description":"kotlinx.coroutines.ThreadContextElement.updateThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/update-thread-context.html","searchKeys":["updateThreadContext","abstract fun updateThreadContext(context: CoroutineContext): S","kotlinx.coroutines.ThreadContextElement.updateThreadContext"]},{"name":"abstract operator fun <P, Q> SelectClause2<P, Q>.invoke(param: P, block: suspend (Q) -> R)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun <P, Q> SelectClause2<P, Q>.invoke(param: P, block: suspend (Q) -> R)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun <Q> SelectClause1<Q>.invoke(block: suspend (Q) -> R)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun <Q> SelectClause1<Q>.invoke(block: suspend (Q) -> R)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun SelectClause0.invoke(block: suspend () -> R)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun SelectClause0.invoke(block: suspend () -> R)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun iterator(): ChannelIterator<E>","description":"kotlinx.coroutines.channels.ReceiveChannel.iterator","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/iterator.html","searchKeys":["iterator","abstract operator fun iterator(): ChannelIterator<E>","kotlinx.coroutines.channels.ReceiveChannel.iterator"]},{"name":"abstract operator fun next(): E","description":"kotlinx.coroutines.channels.ChannelIterator.next","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/next.html","searchKeys":["next","abstract operator fun next(): E","kotlinx.coroutines.channels.ChannelIterator.next"]},{"name":"abstract override fun close()","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.close","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/close.html","searchKeys":["close","abstract override fun close()","kotlinx.coroutines.ExecutorCoroutineDispatcher.close"]},{"name":"abstract override var value: T","description":"kotlinx.coroutines.flow.MutableStateFlow.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/value.html","searchKeys":["value","abstract override var value: T","kotlinx.coroutines.flow.MutableStateFlow.value"]},{"name":"abstract suspend fun acquire()","description":"kotlinx.coroutines.sync.Semaphore.acquire","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/acquire.html","searchKeys":["acquire","abstract suspend fun acquire()","kotlinx.coroutines.sync.Semaphore.acquire"]},{"name":"abstract suspend fun await(): T","description":"kotlinx.coroutines.Deferred.await","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html","searchKeys":["await","abstract suspend fun await(): T","kotlinx.coroutines.Deferred.await"]},{"name":"abstract suspend fun collect(collector: FlowCollector<T>)","description":"kotlinx.coroutines.flow.Flow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/collect.html","searchKeys":["collect","abstract suspend fun collect(collector: FlowCollector<T>)","kotlinx.coroutines.flow.Flow.collect"]},{"name":"abstract suspend fun collectSafely(collector: FlowCollector<T>)","description":"kotlinx.coroutines.flow.AbstractFlow.collectSafely","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/collect-safely.html","searchKeys":["collectSafely","abstract suspend fun collectSafely(collector: FlowCollector<T>)","kotlinx.coroutines.flow.AbstractFlow.collectSafely"]},{"name":"abstract suspend fun emit(value: T)","description":"kotlinx.coroutines.flow.FlowCollector.emit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html","searchKeys":["emit","abstract suspend fun emit(value: T)","kotlinx.coroutines.flow.FlowCollector.emit"]},{"name":"abstract suspend fun join()","description":"kotlinx.coroutines.Job.join","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html","searchKeys":["join","abstract suspend fun join()","kotlinx.coroutines.Job.join"]},{"name":"abstract suspend fun lock(owner: Any? = null)","description":"kotlinx.coroutines.sync.Mutex.lock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html","searchKeys":["lock","abstract suspend fun lock(owner: Any? = null)","kotlinx.coroutines.sync.Mutex.lock"]},{"name":"abstract suspend fun receive(): E","description":"kotlinx.coroutines.channels.ReceiveChannel.receive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html","searchKeys":["receive","abstract suspend fun receive(): E","kotlinx.coroutines.channels.ReceiveChannel.receive"]},{"name":"abstract suspend fun receiveCatching(): ChannelResult<E>","description":"kotlinx.coroutines.channels.ReceiveChannel.receiveCatching","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive-catching.html","searchKeys":["receiveCatching","abstract suspend fun receiveCatching(): ChannelResult<E>","kotlinx.coroutines.channels.ReceiveChannel.receiveCatching"]},{"name":"abstract suspend fun send(element: E)","description":"kotlinx.coroutines.channels.SendChannel.send","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html","searchKeys":["send","abstract suspend fun send(element: E)","kotlinx.coroutines.channels.SendChannel.send"]},{"name":"abstract suspend operator fun hasNext(): Boolean","description":"kotlinx.coroutines.channels.ChannelIterator.hasNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/has-next.html","searchKeys":["hasNext","abstract suspend operator fun hasNext(): Boolean","kotlinx.coroutines.channels.ChannelIterator.hasNext"]},{"name":"abstract suspend override fun collect(collector: FlowCollector<T>): Nothing","description":"kotlinx.coroutines.flow.SharedFlow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/collect.html","searchKeys":["collect","abstract suspend override fun collect(collector: FlowCollector<T>): Nothing","kotlinx.coroutines.flow.SharedFlow.collect"]},{"name":"abstract suspend override fun emit(value: T)","description":"kotlinx.coroutines.flow.MutableSharedFlow.emit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/emit.html","searchKeys":["emit","abstract suspend override fun emit(value: T)","kotlinx.coroutines.flow.MutableSharedFlow.emit"]},{"name":"abstract val availablePermits: Int","description":"kotlinx.coroutines.sync.Semaphore.availablePermits","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/available-permits.html","searchKeys":["availablePermits","abstract val availablePermits: Int","kotlinx.coroutines.sync.Semaphore.availablePermits"]},{"name":"abstract val channel: Channel<E>","description":"kotlinx.coroutines.channels.ActorScope.channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-actor-scope/channel.html","searchKeys":["channel","abstract val channel: Channel<E>","kotlinx.coroutines.channels.ActorScope.channel"]},{"name":"abstract val channel: SendChannel<E>","description":"kotlinx.coroutines.channels.ProducerScope.channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-producer-scope/channel.html","searchKeys":["channel","abstract val channel: SendChannel<E>","kotlinx.coroutines.channels.ProducerScope.channel"]},{"name":"abstract val children: Sequence<Job>","description":"kotlinx.coroutines.Job.children","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/children.html","searchKeys":["children","abstract val children: Sequence<Job>","kotlinx.coroutines.Job.children"]},{"name":"abstract val clauseObject: Any","description":"kotlinx.coroutines.selects.SelectClause.clauseObject","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause/clause-object.html","searchKeys":["clauseObject","abstract val clauseObject: Any","kotlinx.coroutines.selects.SelectClause.clauseObject"]},{"name":"abstract val coroutineContext: CoroutineContext","description":"kotlinx.coroutines.CoroutineScope.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/coroutine-context.html","searchKeys":["coroutineContext","abstract val coroutineContext: CoroutineContext","kotlinx.coroutines.CoroutineScope.coroutineContext"]},{"name":"abstract val executor: Executor","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.executor","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/executor.html","searchKeys":["executor","abstract val executor: Executor","kotlinx.coroutines.ExecutorCoroutineDispatcher.executor"]},{"name":"abstract val immediate: MainCoroutineDispatcher","description":"kotlinx.coroutines.MainCoroutineDispatcher.immediate","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/immediate.html","searchKeys":["immediate","abstract val immediate: MainCoroutineDispatcher","kotlinx.coroutines.MainCoroutineDispatcher.immediate"]},{"name":"abstract val isActive: Boolean","description":"kotlinx.coroutines.CancellableContinuation.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-active.html","searchKeys":["isActive","abstract val isActive: Boolean","kotlinx.coroutines.CancellableContinuation.isActive"]},{"name":"abstract val isActive: Boolean","description":"kotlinx.coroutines.Job.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-active.html","searchKeys":["isActive","abstract val isActive: Boolean","kotlinx.coroutines.Job.isActive"]},{"name":"abstract val isCancelled: Boolean","description":"kotlinx.coroutines.CancellableContinuation.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-cancelled.html","searchKeys":["isCancelled","abstract val isCancelled: Boolean","kotlinx.coroutines.CancellableContinuation.isCancelled"]},{"name":"abstract val isCancelled: Boolean","description":"kotlinx.coroutines.Job.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-cancelled.html","searchKeys":["isCancelled","abstract val isCancelled: Boolean","kotlinx.coroutines.Job.isCancelled"]},{"name":"abstract val isClosedForReceive: Boolean","description":"kotlinx.coroutines.channels.ReceiveChannel.isClosedForReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/is-closed-for-receive.html","searchKeys":["isClosedForReceive","abstract val isClosedForReceive: Boolean","kotlinx.coroutines.channels.ReceiveChannel.isClosedForReceive"]},{"name":"abstract val isClosedForSend: Boolean","description":"kotlinx.coroutines.channels.SendChannel.isClosedForSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/is-closed-for-send.html","searchKeys":["isClosedForSend","abstract val isClosedForSend: Boolean","kotlinx.coroutines.channels.SendChannel.isClosedForSend"]},{"name":"abstract val isCompleted: Boolean","description":"kotlinx.coroutines.CancellableContinuation.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-completed.html","searchKeys":["isCompleted","abstract val isCompleted: Boolean","kotlinx.coroutines.CancellableContinuation.isCompleted"]},{"name":"abstract val isCompleted: Boolean","description":"kotlinx.coroutines.Job.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-completed.html","searchKeys":["isCompleted","abstract val isCompleted: Boolean","kotlinx.coroutines.Job.isCompleted"]},{"name":"abstract val isEmpty: Boolean","description":"kotlinx.coroutines.channels.ReceiveChannel.isEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/is-empty.html","searchKeys":["isEmpty","abstract val isEmpty: Boolean","kotlinx.coroutines.channels.ReceiveChannel.isEmpty"]},{"name":"abstract val isLocked: Boolean","description":"kotlinx.coroutines.sync.Mutex.isLocked","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/is-locked.html","searchKeys":["isLocked","abstract val isLocked: Boolean","kotlinx.coroutines.sync.Mutex.isLocked"]},{"name":"abstract val onAwait: SelectClause1<T>","description":"kotlinx.coroutines.Deferred.onAwait","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/on-await.html","searchKeys":["onAwait","abstract val onAwait: SelectClause1<T>","kotlinx.coroutines.Deferred.onAwait"]},{"name":"abstract val onCancellationConstructor: OnCancellationConstructor?","description":"kotlinx.coroutines.selects.SelectClause.onCancellationConstructor","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause/on-cancellation-constructor.html","searchKeys":["onCancellationConstructor","abstract val onCancellationConstructor: OnCancellationConstructor?","kotlinx.coroutines.selects.SelectClause.onCancellationConstructor"]},{"name":"abstract val onJoin: SelectClause0","description":"kotlinx.coroutines.Job.onJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/on-join.html","searchKeys":["onJoin","abstract val onJoin: SelectClause0","kotlinx.coroutines.Job.onJoin"]},{"name":"abstract val onLock: SelectClause2<Any?, Mutex>","description":"kotlinx.coroutines.sync.Mutex.onLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/on-lock.html","searchKeys":["onLock","abstract val onLock: SelectClause2<Any?, Mutex>","kotlinx.coroutines.sync.Mutex.onLock"]},{"name":"abstract val onReceive: SelectClause1<E>","description":"kotlinx.coroutines.channels.ReceiveChannel.onReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html","searchKeys":["onReceive","abstract val onReceive: SelectClause1<E>","kotlinx.coroutines.channels.ReceiveChannel.onReceive"]},{"name":"abstract val onReceiveCatching: SelectClause1<ChannelResult<E>>","description":"kotlinx.coroutines.channels.ReceiveChannel.onReceiveCatching","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive-catching.html","searchKeys":["onReceiveCatching","abstract val onReceiveCatching: SelectClause1<ChannelResult<E>>","kotlinx.coroutines.channels.ReceiveChannel.onReceiveCatching"]},{"name":"abstract val onSend: SelectClause2<E, SendChannel<E>>","description":"kotlinx.coroutines.channels.SendChannel.onSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/on-send.html","searchKeys":["onSend","abstract val onSend: SelectClause2<E, SendChannel<E>>","kotlinx.coroutines.channels.SendChannel.onSend"]},{"name":"abstract val parent: Job?","description":"kotlinx.coroutines.Job.parent","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/parent.html","searchKeys":["parent","abstract val parent: Job?","kotlinx.coroutines.Job.parent"]},{"name":"abstract val processResFunc: ProcessResultFunction","description":"kotlinx.coroutines.selects.SelectClause.processResFunc","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause/process-res-func.html","searchKeys":["processResFunc","abstract val processResFunc: ProcessResultFunction","kotlinx.coroutines.selects.SelectClause.processResFunc"]},{"name":"abstract val regFunc: RegistrationFunction","description":"kotlinx.coroutines.selects.SelectClause.regFunc","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause/reg-func.html","searchKeys":["regFunc","abstract val regFunc: RegistrationFunction","kotlinx.coroutines.selects.SelectClause.regFunc"]},{"name":"abstract val replayCache: List<T>","description":"kotlinx.coroutines.flow.SharedFlow.replayCache","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/replay-cache.html","searchKeys":["replayCache","abstract val replayCache: List<T>","kotlinx.coroutines.flow.SharedFlow.replayCache"]},{"name":"abstract val subscriptionCount: StateFlow<Int>","description":"kotlinx.coroutines.flow.MutableSharedFlow.subscriptionCount","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/subscription-count.html","searchKeys":["subscriptionCount","abstract val subscriptionCount: StateFlow<Int>","kotlinx.coroutines.flow.MutableSharedFlow.subscriptionCount"]},{"name":"abstract val value: T","description":"kotlinx.coroutines.flow.StateFlow.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/value.html","searchKeys":["value","abstract val value: T","kotlinx.coroutines.flow.StateFlow.value"]},{"name":"annotation class DelicateCoroutinesApi","description":"kotlinx.coroutines.DelicateCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delicate-coroutines-api/index.html","searchKeys":["DelicateCoroutinesApi","annotation class DelicateCoroutinesApi","kotlinx.coroutines.DelicateCoroutinesApi"]},{"name":"annotation class ExperimentalCoroutinesApi","description":"kotlinx.coroutines.ExperimentalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-experimental-coroutines-api/index.html","searchKeys":["ExperimentalCoroutinesApi","annotation class ExperimentalCoroutinesApi","kotlinx.coroutines.ExperimentalCoroutinesApi"]},{"name":"annotation class FlowPreview","description":"kotlinx.coroutines.FlowPreview","location":"kotlinx-coroutines-core/kotlinx.coroutines/-flow-preview/index.html","searchKeys":["FlowPreview","annotation class FlowPreview","kotlinx.coroutines.FlowPreview"]},{"name":"annotation class InternalCoroutinesApi","description":"kotlinx.coroutines.InternalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-internal-coroutines-api/index.html","searchKeys":["InternalCoroutinesApi","annotation class InternalCoroutinesApi","kotlinx.coroutines.InternalCoroutinesApi"]},{"name":"annotation class ObsoleteCoroutinesApi","description":"kotlinx.coroutines.ObsoleteCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-obsolete-coroutines-api/index.html","searchKeys":["ObsoleteCoroutinesApi","annotation class ObsoleteCoroutinesApi","kotlinx.coroutines.ObsoleteCoroutinesApi"]},{"name":"class ClosedReceiveChannelException(message: String?) : NoSuchElementException","description":"kotlinx.coroutines.channels.ClosedReceiveChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-receive-channel-exception/index.html","searchKeys":["ClosedReceiveChannelException","class ClosedReceiveChannelException(message: String?) : NoSuchElementException","kotlinx.coroutines.channels.ClosedReceiveChannelException"]},{"name":"class ClosedSendChannelException(message: String?) : IllegalStateException","description":"kotlinx.coroutines.channels.ClosedSendChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-send-channel-exception/index.html","searchKeys":["ClosedSendChannelException","class ClosedSendChannelException(message: String?) : IllegalStateException","kotlinx.coroutines.channels.ClosedSendChannelException"]},{"name":"class ConflatedBroadcastChannel<E> : BroadcastChannel<E> ","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/index.html","searchKeys":["ConflatedBroadcastChannel","class ConflatedBroadcastChannel<E> : BroadcastChannel<E> ","kotlinx.coroutines.channels.ConflatedBroadcastChannel"]},{"name":"class TimeoutCancellationException : CancellationException, CopyableThrowable<TimeoutCancellationException> ","description":"kotlinx.coroutines.TimeoutCancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-timeout-cancellation-exception/index.html","searchKeys":["TimeoutCancellationException","class TimeoutCancellationException : CancellationException, CopyableThrowable<TimeoutCancellationException> ","kotlinx.coroutines.TimeoutCancellationException"]},{"name":"const val BUFFERED: Int","description":"kotlinx.coroutines.channels.Channel.Factory.BUFFERED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-b-u-f-f-e-r-e-d.html","searchKeys":["BUFFERED","const val BUFFERED: Int","kotlinx.coroutines.channels.Channel.Factory.BUFFERED"]},{"name":"const val CONFLATED: Int","description":"kotlinx.coroutines.channels.Channel.Factory.CONFLATED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-c-o-n-f-l-a-t-e-d.html","searchKeys":["CONFLATED","const val CONFLATED: Int","kotlinx.coroutines.channels.Channel.Factory.CONFLATED"]},{"name":"const val DEBUG_PROPERTY_NAME: String","description":"kotlinx.coroutines.DEBUG_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEBUG_PROPERTY_NAME","const val DEBUG_PROPERTY_NAME: String","kotlinx.coroutines.DEBUG_PROPERTY_NAME"]},{"name":"const val DEBUG_PROPERTY_VALUE_AUTO: String","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_AUTO","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-a-u-t-o.html","searchKeys":["DEBUG_PROPERTY_VALUE_AUTO","const val DEBUG_PROPERTY_VALUE_AUTO: String","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_AUTO"]},{"name":"const val DEBUG_PROPERTY_VALUE_OFF: String","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_OFF","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-o-f-f.html","searchKeys":["DEBUG_PROPERTY_VALUE_OFF","const val DEBUG_PROPERTY_VALUE_OFF: String","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_OFF"]},{"name":"const val DEBUG_PROPERTY_VALUE_ON: String","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_ON","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-o-n.html","searchKeys":["DEBUG_PROPERTY_VALUE_ON","const val DEBUG_PROPERTY_VALUE_ON: String","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_ON"]},{"name":"const val DEFAULT_BUFFER_PROPERTY_NAME: String","description":"kotlinx.coroutines.channels.Channel.Factory.DEFAULT_BUFFER_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-d-e-f-a-u-l-t_-b-u-f-f-e-r_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEFAULT_BUFFER_PROPERTY_NAME","const val DEFAULT_BUFFER_PROPERTY_NAME: String","kotlinx.coroutines.channels.Channel.Factory.DEFAULT_BUFFER_PROPERTY_NAME"]},{"name":"const val DEFAULT_CONCURRENCY_PROPERTY_NAME: String","description":"kotlinx.coroutines.flow.DEFAULT_CONCURRENCY_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-d-e-f-a-u-l-t_-c-o-n-c-u-r-r-e-n-c-y_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEFAULT_CONCURRENCY_PROPERTY_NAME","const val DEFAULT_CONCURRENCY_PROPERTY_NAME: String","kotlinx.coroutines.flow.DEFAULT_CONCURRENCY_PROPERTY_NAME"]},{"name":"const val IO_PARALLELISM_PROPERTY_NAME: String","description":"kotlinx.coroutines.IO_PARALLELISM_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines/-i-o_-p-a-r-a-l-l-e-l-i-s-m_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["IO_PARALLELISM_PROPERTY_NAME","const val IO_PARALLELISM_PROPERTY_NAME: String","kotlinx.coroutines.IO_PARALLELISM_PROPERTY_NAME"]},{"name":"const val RENDEZVOUS: Int = 0","description":"kotlinx.coroutines.channels.Channel.Factory.RENDEZVOUS","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-r-e-n-d-e-z-v-o-u-s.html","searchKeys":["RENDEZVOUS","const val RENDEZVOUS: Int = 0","kotlinx.coroutines.channels.Channel.Factory.RENDEZVOUS"]},{"name":"const val UNLIMITED: Int","description":"kotlinx.coroutines.channels.Channel.Factory.UNLIMITED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-u-n-l-i-m-i-t-e-d.html","searchKeys":["UNLIMITED","const val UNLIMITED: Int","kotlinx.coroutines.channels.Channel.Factory.UNLIMITED"]},{"name":"constructor()","description":"kotlinx.coroutines.CoroutineDispatcher.CoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/-coroutine-dispatcher.html","searchKeys":["CoroutineDispatcher","constructor()","kotlinx.coroutines.CoroutineDispatcher.CoroutineDispatcher"]},{"name":"constructor()","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/-executor-coroutine-dispatcher.html","searchKeys":["ExecutorCoroutineDispatcher","constructor()","kotlinx.coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher"]},{"name":"constructor()","description":"kotlinx.coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/-main-coroutine-dispatcher.html","searchKeys":["MainCoroutineDispatcher","constructor()","kotlinx.coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher"]},{"name":"constructor()","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/-conflated-broadcast-channel.html","searchKeys":["ConflatedBroadcastChannel","constructor()","kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel"]},{"name":"constructor()","description":"kotlinx.coroutines.flow.AbstractFlow.AbstractFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/-abstract-flow.html","searchKeys":["AbstractFlow","constructor()","kotlinx.coroutines.flow.AbstractFlow.AbstractFlow"]},{"name":"constructor(message: String?)","description":"kotlinx.coroutines.channels.ClosedReceiveChannelException.ClosedReceiveChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-receive-channel-exception/-closed-receive-channel-exception.html","searchKeys":["ClosedReceiveChannelException","constructor(message: String?)","kotlinx.coroutines.channels.ClosedReceiveChannelException.ClosedReceiveChannelException"]},{"name":"constructor(message: String?)","description":"kotlinx.coroutines.channels.ClosedSendChannelException.ClosedSendChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-send-channel-exception/-closed-send-channel-exception.html","searchKeys":["ClosedSendChannelException","constructor(message: String?)","kotlinx.coroutines.channels.ClosedSendChannelException.ClosedSendChannelException"]},{"name":"constructor(name: String)","description":"kotlinx.coroutines.CoroutineName.CoroutineName","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/-coroutine-name.html","searchKeys":["CoroutineName","constructor(name: String)","kotlinx.coroutines.CoroutineName.CoroutineName"]},{"name":"constructor(value: E)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/-conflated-broadcast-channel.html","searchKeys":["ConflatedBroadcastChannel","constructor(value: E)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel"]},{"name":"data class CoroutineName(val name: String) : AbstractCoroutineContextElement","description":"kotlinx.coroutines.CoroutineName","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html","searchKeys":["CoroutineName","data class CoroutineName(val name: String) : AbstractCoroutineContextElement","kotlinx.coroutines.CoroutineName"]},{"name":"enum BufferOverflow : Enum<BufferOverflow> ","description":"kotlinx.coroutines.channels.BufferOverflow","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/index.html","searchKeys":["BufferOverflow","enum BufferOverflow : Enum<BufferOverflow> ","kotlinx.coroutines.channels.BufferOverflow"]},{"name":"enum CoroutineStart : Enum<CoroutineStart> ","description":"kotlinx.coroutines.CoroutineStart","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/index.html","searchKeys":["CoroutineStart","enum CoroutineStart : Enum<CoroutineStart> ","kotlinx.coroutines.CoroutineStart"]},{"name":"enum SharingCommand : Enum<SharingCommand> ","description":"kotlinx.coroutines.flow.SharingCommand","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/index.html","searchKeys":["SharingCommand","enum SharingCommand : Enum<SharingCommand> ","kotlinx.coroutines.flow.SharingCommand"]},{"name":"enum TickerMode : Enum<TickerMode> ","description":"kotlinx.coroutines.channels.TickerMode","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/index.html","searchKeys":["TickerMode","enum TickerMode : Enum<TickerMode> ","kotlinx.coroutines.channels.TickerMode"]},{"name":"expect abstract class CloseableCoroutineDispatcher : CoroutineDispatcher","description":"kotlinx.coroutines.CloseableCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/index.html","searchKeys":["CloseableCoroutineDispatcher","expect abstract class CloseableCoroutineDispatcher : CoroutineDispatcher","kotlinx.coroutines.CloseableCoroutineDispatcher"]},{"name":"expect abstract fun close()","description":"kotlinx.coroutines.CloseableCoroutineDispatcher.close","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/close.html","searchKeys":["close","expect abstract fun close()","kotlinx.coroutines.CloseableCoroutineDispatcher.close"]},{"name":"expect constructor()","description":"kotlinx.coroutines.CloseableCoroutineDispatcher.CloseableCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/-closeable-coroutine-dispatcher.html","searchKeys":["CloseableCoroutineDispatcher","expect constructor()","kotlinx.coroutines.CloseableCoroutineDispatcher.CloseableCoroutineDispatcher"]},{"name":"expect constructor(message: String?)","description":"kotlinx.coroutines.CancellationException.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/-cancellation-exception.html","searchKeys":["CancellationException","expect constructor(message: String?)","kotlinx.coroutines.CancellationException.CancellationException"]},{"name":"expect fun <T> runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.runBlocking","location":"kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html","searchKeys":["runBlocking","expect fun <T> runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.runBlocking"]},{"name":"expect fun CancellationException(message: String?, cause: Throwable?): CancellationException","description":"kotlinx.coroutines.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception.html","searchKeys":["CancellationException","expect fun CancellationException(message: String?, cause: Throwable?): CancellationException","kotlinx.coroutines.CancellationException"]},{"name":"expect fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext","description":"kotlinx.coroutines.newCoroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html","searchKeys":["newCoroutineContext","expect fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext","kotlinx.coroutines.newCoroutineContext"]},{"name":"expect fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher","description":"kotlinx.coroutines.newFixedThreadPoolContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html","searchKeys":["newFixedThreadPoolContext","expect fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher","kotlinx.coroutines.newFixedThreadPoolContext"]},{"name":"expect fun newSingleThreadContext(name: String): CloseableCoroutineDispatcher","description":"kotlinx.coroutines.newSingleThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html","searchKeys":["newSingleThreadContext","expect fun newSingleThreadContext(name: String): CloseableCoroutineDispatcher","kotlinx.coroutines.newSingleThreadContext"]},{"name":"expect inline fun Runnable(crossinline block: () -> Unit): Runnable","description":"kotlinx.coroutines.Runnable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-runnable.html","searchKeys":["Runnable","expect inline fun Runnable(crossinline block: () -> Unit): Runnable","kotlinx.coroutines.Runnable"]},{"name":"expect interface Runnable","description":"kotlinx.coroutines.Runnable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-runnable/index.html","searchKeys":["Runnable","expect interface Runnable","kotlinx.coroutines.Runnable"]},{"name":"expect object Dispatchers","description":"kotlinx.coroutines.Dispatchers","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html","searchKeys":["Dispatchers","expect object Dispatchers","kotlinx.coroutines.Dispatchers"]},{"name":"expect open class CancellationException(message: String?) : IllegalStateException","description":"kotlinx.coroutines.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html","searchKeys":["CancellationException","expect open class CancellationException(message: String?) : IllegalStateException","kotlinx.coroutines.CancellationException"]},{"name":"expect val Default: CoroutineDispatcher","description":"kotlinx.coroutines.Dispatchers.Default","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html","searchKeys":["Default","expect val Default: CoroutineDispatcher","kotlinx.coroutines.Dispatchers.Default"]},{"name":"expect val Dispatchers.IO: CoroutineDispatcher","description":"kotlinx.coroutines.IO","location":"kotlinx-coroutines-core/kotlinx.coroutines/-i-o.html","searchKeys":["IO","expect val Dispatchers.IO: CoroutineDispatcher","kotlinx.coroutines.IO"]},{"name":"expect val Main: MainCoroutineDispatcher","description":"kotlinx.coroutines.Dispatchers.Main","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html","searchKeys":["Main","expect val Main: MainCoroutineDispatcher","kotlinx.coroutines.Dispatchers.Main"]},{"name":"expect val Unconfined: CoroutineDispatcher","description":"kotlinx.coroutines.Dispatchers.Unconfined","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html","searchKeys":["Unconfined","expect val Unconfined: CoroutineDispatcher","kotlinx.coroutines.Dispatchers.Unconfined"]},{"name":"fun <E> BroadcastChannel(capacity: Int): BroadcastChannel<E>","description":"kotlinx.coroutines.channels.BroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel.html","searchKeys":["BroadcastChannel","fun <E> BroadcastChannel(capacity: Int): BroadcastChannel<E>","kotlinx.coroutines.channels.BroadcastChannel"]},{"name":"fun <E> Channel(capacity: Int = RENDEZVOUS, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null): Channel<E>","description":"kotlinx.coroutines.channels.Channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html","searchKeys":["Channel","fun <E> Channel(capacity: Int = RENDEZVOUS, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null): Channel<E>","kotlinx.coroutines.channels.Channel"]},{"name":"fun <E> CoroutineScope.actor(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ActorScope<E>.() -> Unit): SendChannel<E>","description":"kotlinx.coroutines.channels.actor","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html","searchKeys":["actor","fun <E> CoroutineScope.actor(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ActorScope<E>.() -> Unit): SendChannel<E>","kotlinx.coroutines.channels.actor"]},{"name":"fun <E> CoroutineScope.broadcast(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): BroadcastChannel<E>","description":"kotlinx.coroutines.channels.broadcast","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/broadcast.html","searchKeys":["broadcast","fun <E> CoroutineScope.broadcast(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): BroadcastChannel<E>","kotlinx.coroutines.channels.broadcast"]},{"name":"fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>","description":"kotlinx.coroutines.channels.produce","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html","searchKeys":["produce","fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>","kotlinx.coroutines.channels.produce"]},{"name":"fun <E> ReceiveChannel<E>.broadcast(capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY): BroadcastChannel<E>","description":"kotlinx.coroutines.channels.broadcast","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/broadcast.html","searchKeys":["broadcast","fun <E> ReceiveChannel<E>.broadcast(capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY): BroadcastChannel<E>","kotlinx.coroutines.channels.broadcast"]},{"name":"fun <E> SendChannel<E>.trySendBlocking(element: E): ChannelResult<Unit>","description":"kotlinx.coroutines.channels.trySendBlocking","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/try-send-blocking.html","searchKeys":["trySendBlocking","fun <E> SendChannel<E>.trySendBlocking(element: E): ChannelResult<Unit>","kotlinx.coroutines.channels.trySendBlocking"]},{"name":"fun <E> closed(cause: Throwable?): ChannelResult<E>","description":"kotlinx.coroutines.channels.ChannelResult.Companion.closed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/closed.html","searchKeys":["closed","fun <E> closed(cause: Throwable?): ChannelResult<E>","kotlinx.coroutines.channels.ChannelResult.Companion.closed"]},{"name":"fun <E> failure(): ChannelResult<E>","description":"kotlinx.coroutines.channels.ChannelResult.Companion.failure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/failure.html","searchKeys":["failure","fun <E> failure(): ChannelResult<E>","kotlinx.coroutines.channels.ChannelResult.Companion.failure"]},{"name":"fun <E> success(value: E): ChannelResult<E>","description":"kotlinx.coroutines.channels.ChannelResult.Companion.success","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/success.html","searchKeys":["success","fun <E> success(value: E): ChannelResult<E>","kotlinx.coroutines.channels.ChannelResult.Companion.success"]},{"name":"fun <Error class: unknown class>.asCompletableFuture(): CompletableFuture<Unit>","description":"kotlinx.coroutines.future.asCompletableFuture","location":"kotlinx-coroutines-core/kotlinx.coroutines.future/as-completable-future.html","searchKeys":["asCompletableFuture","fun <Error class: unknown class>.asCompletableFuture(): CompletableFuture<Unit>","kotlinx.coroutines.future.asCompletableFuture"]},{"name":"fun <R : Any> Flow<*>.filterIsInstance(klass: KClass<R>): Flow<R>","description":"kotlinx.coroutines.flow.filterIsInstance","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-is-instance.html","searchKeys":["filterIsInstance","fun <R : Any> Flow<*>.filterIsInstance(klass: KClass<R>): Flow<R>","kotlinx.coroutines.flow.filterIsInstance"]},{"name":"fun <R> <Error class: unknown class><R>.onTimeout(duration: Duration, block: suspend () -> R)","description":"kotlinx.coroutines.time.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/on-timeout.html","searchKeys":["onTimeout","fun <R> <Error class: unknown class><R>.onTimeout(duration: Duration, block: suspend () -> R)","kotlinx.coroutines.time.onTimeout"]},{"name":"fun <R> SelectBuilder<R>.onTimeout(timeMillis: Long, block: suspend () -> R)","description":"kotlinx.coroutines.selects.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/on-timeout.html","searchKeys":["onTimeout","fun <R> SelectBuilder<R>.onTimeout(timeMillis: Long, block: suspend () -> R)","kotlinx.coroutines.selects.onTimeout"]},{"name":"fun <R> SelectBuilder<R>.onTimeout(timeout: Duration, block: suspend () -> R)","description":"kotlinx.coroutines.selects.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/on-timeout.html","searchKeys":["onTimeout","fun <R> SelectBuilder<R>.onTimeout(timeout: Duration, block: suspend () -> R)","kotlinx.coroutines.selects.onTimeout"]},{"name":"fun <T : Any> Flow<T?>.filterNotNull(): Flow<T>","description":"kotlinx.coroutines.flow.filterNotNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-not-null.html","searchKeys":["filterNotNull","fun <T : Any> Flow<T?>.filterNotNull(): Flow<T>","kotlinx.coroutines.flow.filterNotNull"]},{"name":"fun <T, K> Flow<T>.distinctUntilChangedBy(keySelector: (T) -> K): Flow<T>","description":"kotlinx.coroutines.flow.distinctUntilChangedBy","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed-by.html","searchKeys":["distinctUntilChangedBy","fun <T, K> Flow<T>.distinctUntilChangedBy(keySelector: (T) -> K): Flow<T>","kotlinx.coroutines.flow.distinctUntilChangedBy"]},{"name":"fun <T, R> Flow<T>.flatMapConcat(transform: suspend (value: T) -> Flow<R>): Flow<R>","description":"kotlinx.coroutines.flow.flatMapConcat","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-concat.html","searchKeys":["flatMapConcat","fun <T, R> Flow<T>.flatMapConcat(transform: suspend (value: T) -> Flow<R>): Flow<R>","kotlinx.coroutines.flow.flatMapConcat"]},{"name":"fun <T, R> Flow<T>.flatMapMerge(concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (value: T) -> Flow<R>): Flow<R>","description":"kotlinx.coroutines.flow.flatMapMerge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html","searchKeys":["flatMapMerge","fun <T, R> Flow<T>.flatMapMerge(concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (value: T) -> Flow<R>): Flow<R>","kotlinx.coroutines.flow.flatMapMerge"]},{"name":"fun <T, R> Flow<T>.mapLatest(transform: suspend (value: T) -> R): Flow<R>","description":"kotlinx.coroutines.flow.mapLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map-latest.html","searchKeys":["mapLatest","fun <T, R> Flow<T>.mapLatest(transform: suspend (value: T) -> R): Flow<R>","kotlinx.coroutines.flow.mapLatest"]},{"name":"fun <T, R> Flow<T>.runningFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>","description":"kotlinx.coroutines.flow.runningFold","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/running-fold.html","searchKeys":["runningFold","fun <T, R> Flow<T>.runningFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>","kotlinx.coroutines.flow.runningFold"]},{"name":"fun <T, R> Flow<T>.scan(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>","description":"kotlinx.coroutines.flow.scan","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/scan.html","searchKeys":["scan","fun <T, R> Flow<T>.scan(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>","kotlinx.coroutines.flow.scan"]},{"name":"fun <T, R> Flow<T>.transformLatest(transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.transformLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform-latest.html","searchKeys":["transformLatest","fun <T, R> Flow<T>.transformLatest(transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>","kotlinx.coroutines.flow.transformLatest"]},{"name":"fun <T, R> Flow<T>.transformWhile(transform: suspend FlowCollector<R>.(value: T) -> Boolean): Flow<R>","description":"kotlinx.coroutines.flow.transformWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform-while.html","searchKeys":["transformWhile","fun <T, R> Flow<T>.transformWhile(transform: suspend FlowCollector<R>.(value: T) -> Boolean): Flow<R>","kotlinx.coroutines.flow.transformWhile"]},{"name":"fun <T1, T2, R> Flow<T1>.combine(flow: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, R> Flow<T1>.combine(flow: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, R> Flow<T1>.combineTransform(flow: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, R> Flow<T1>.combineTransform(flow: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, R> Flow<T1>.zip(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>","description":"kotlinx.coroutines.flow.zip","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/zip.html","searchKeys":["zip","fun <T1, T2, R> Flow<T1>.zip(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>","kotlinx.coroutines.flow.zip"]},{"name":"fun <T1, T2, R> combine(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, R> combine(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend FlowCollector<R>.(T1, T2, T3) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend FlowCollector<R>.(T1, T2, T3) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, T4, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, T4, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, T4, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, T4, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, T4, T5, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, T4, T5, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, T4, T5, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4, T5) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, T4, T5, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4, T5) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T> () -> T.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> () -> T.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> <Error class: unknown class>.future(context: CoroutineContext = EmptyCoroutineContext, start: <Error class: unknown class> = CoroutineStart.DEFAULT, block: suspend <Error class: unknown class>.() -> T): CompletableFuture<T>","description":"kotlinx.coroutines.future.future","location":"kotlinx-coroutines-core/kotlinx.coroutines.future/future.html","searchKeys":["future","fun <T> <Error class: unknown class>.future(context: CoroutineContext = EmptyCoroutineContext, start: <Error class: unknown class> = CoroutineStart.DEFAULT, block: suspend <Error class: unknown class>.() -> T): CompletableFuture<T>","kotlinx.coroutines.future.future"]},{"name":"fun <T> <Error class: unknown class><T>.asCompletableFuture(): CompletableFuture<T>","description":"kotlinx.coroutines.future.asCompletableFuture","location":"kotlinx-coroutines-core/kotlinx.coroutines.future/as-completable-future.html","searchKeys":["asCompletableFuture","fun <T> <Error class: unknown class><T>.asCompletableFuture(): CompletableFuture<T>","kotlinx.coroutines.future.asCompletableFuture"]},{"name":"fun <T> <Error class: unknown class><T>.debounce(timeout: Duration): <Error class: unknown class><T>","description":"kotlinx.coroutines.time.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/debounce.html","searchKeys":["debounce","fun <T> <Error class: unknown class><T>.debounce(timeout: Duration): <Error class: unknown class><T>","kotlinx.coroutines.time.debounce"]},{"name":"fun <T> <Error class: unknown class><T>.sample(period: Duration): <Error class: unknown class><T>","description":"kotlinx.coroutines.time.sample","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/sample.html","searchKeys":["sample","fun <T> <Error class: unknown class><T>.sample(period: Duration): <Error class: unknown class><T>","kotlinx.coroutines.time.sample"]},{"name":"fun <T> Array<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Array<T>.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> BroadcastChannel<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> BroadcastChannel<T>.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> CompletableDeferred(parent: Job? = null): CompletableDeferred<T>","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred.html","searchKeys":["CompletableDeferred","fun <T> CompletableDeferred(parent: Job? = null): CompletableDeferred<T>","kotlinx.coroutines.CompletableDeferred"]},{"name":"fun <T> CompletableDeferred(value: T): CompletableDeferred<T>","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred.html","searchKeys":["CompletableDeferred","fun <T> CompletableDeferred(value: T): CompletableDeferred<T>","kotlinx.coroutines.CompletableDeferred"]},{"name":"fun <T> CompletableDeferred<T>.completeWith(result: Result<T>): Boolean","description":"kotlinx.coroutines.completeWith","location":"kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html","searchKeys":["completeWith","fun <T> CompletableDeferred<T>.completeWith(result: Result<T>): Boolean","kotlinx.coroutines.completeWith"]},{"name":"fun <T> CompletionStage<T>.asDeferred(): <Error class: unknown class><T>","description":"kotlinx.coroutines.future.asDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines.future/as-deferred.html","searchKeys":["asDeferred","fun <T> CompletionStage<T>.asDeferred(): <Error class: unknown class><T>","kotlinx.coroutines.future.asDeferred"]},{"name":"fun <T> CoroutineScope.async(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>","description":"kotlinx.coroutines.async","location":"kotlinx-coroutines-core/kotlinx.coroutines/async.html","searchKeys":["async","fun <T> CoroutineScope.async(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>","kotlinx.coroutines.async"]},{"name":"fun <T> CoroutineScope.promise(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Promise<T>","description":"kotlinx.coroutines.promise","location":"kotlinx-coroutines-core/kotlinx.coroutines/promise.html","searchKeys":["promise","fun <T> CoroutineScope.promise(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Promise<T>","kotlinx.coroutines.promise"]},{"name":"fun <T> Deferred<T>.asPromise(): Promise<T>","description":"kotlinx.coroutines.asPromise","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-promise.html","searchKeys":["asPromise","fun <T> Deferred<T>.asPromise(): Promise<T>","kotlinx.coroutines.asPromise"]},{"name":"fun <T> Flow<Flow<T>>.flattenConcat(): Flow<T>","description":"kotlinx.coroutines.flow.flattenConcat","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-concat.html","searchKeys":["flattenConcat","fun <T> Flow<Flow<T>>.flattenConcat(): Flow<T>","kotlinx.coroutines.flow.flattenConcat"]},{"name":"fun <T> Flow<Flow<T>>.flattenMerge(concurrency: Int = DEFAULT_CONCURRENCY): Flow<T>","description":"kotlinx.coroutines.flow.flattenMerge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-merge.html","searchKeys":["flattenMerge","fun <T> Flow<Flow<T>>.flattenMerge(concurrency: Int = DEFAULT_CONCURRENCY): Flow<T>","kotlinx.coroutines.flow.flattenMerge"]},{"name":"fun <T> Flow<T>.buffer(capacity: Int = BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>","description":"kotlinx.coroutines.flow.buffer","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html","searchKeys":["buffer","fun <T> Flow<T>.buffer(capacity: Int = BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>","kotlinx.coroutines.flow.buffer"]},{"name":"fun <T> Flow<T>.cancellable(): Flow<T>","description":"kotlinx.coroutines.flow.cancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/cancellable.html","searchKeys":["cancellable","fun <T> Flow<T>.cancellable(): Flow<T>","kotlinx.coroutines.flow.cancellable"]},{"name":"fun <T> Flow<T>.catch(action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.catch","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html","searchKeys":["catch","fun <T> Flow<T>.catch(action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>","kotlinx.coroutines.flow.catch"]},{"name":"fun <T> Flow<T>.conflate(): Flow<T>","description":"kotlinx.coroutines.flow.conflate","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/conflate.html","searchKeys":["conflate","fun <T> Flow<T>.conflate(): Flow<T>","kotlinx.coroutines.flow.conflate"]},{"name":"fun <T> Flow<T>.debounce(timeout: (T) -> Duration): Flow<T>","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeout: (T) -> Duration): Flow<T>","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeoutMillis: (T) -> Long): Flow<T>","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeoutMillis: (T) -> Long): Flow<T>","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeoutMillis: Long): Flow<T>","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeoutMillis: Long): Flow<T>","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.distinctUntilChanged(): Flow<T>","description":"kotlinx.coroutines.flow.distinctUntilChanged","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html","searchKeys":["distinctUntilChanged","fun <T> Flow<T>.distinctUntilChanged(): Flow<T>","kotlinx.coroutines.flow.distinctUntilChanged"]},{"name":"fun <T> Flow<T>.distinctUntilChanged(areEquivalent: (old: T, new: T) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.distinctUntilChanged","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html","searchKeys":["distinctUntilChanged","fun <T> Flow<T>.distinctUntilChanged(areEquivalent: (old: T, new: T) -> Boolean): Flow<T>","kotlinx.coroutines.flow.distinctUntilChanged"]},{"name":"fun <T> Flow<T>.drop(count: Int): Flow<T>","description":"kotlinx.coroutines.flow.drop","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/drop.html","searchKeys":["drop","fun <T> Flow<T>.drop(count: Int): Flow<T>","kotlinx.coroutines.flow.drop"]},{"name":"fun <T> Flow<T>.dropWhile(predicate: suspend (T) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.dropWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/drop-while.html","searchKeys":["dropWhile","fun <T> Flow<T>.dropWhile(predicate: suspend (T) -> Boolean): Flow<T>","kotlinx.coroutines.flow.dropWhile"]},{"name":"fun <T> Flow<T>.flowOn(context: CoroutineContext): Flow<T>","description":"kotlinx.coroutines.flow.flowOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html","searchKeys":["flowOn","fun <T> Flow<T>.flowOn(context: CoroutineContext): Flow<T>","kotlinx.coroutines.flow.flowOn"]},{"name":"fun <T> Flow<T>.launchIn(scope: CoroutineScope): Job","description":"kotlinx.coroutines.flow.launchIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html","searchKeys":["launchIn","fun <T> Flow<T>.launchIn(scope: CoroutineScope): Job","kotlinx.coroutines.flow.launchIn"]},{"name":"fun <T> Flow<T>.onCompletion(action: suspend FlowCollector<T>.(cause: Throwable?) -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.onCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html","searchKeys":["onCompletion","fun <T> Flow<T>.onCompletion(action: suspend FlowCollector<T>.(cause: Throwable?) -> Unit): Flow<T>","kotlinx.coroutines.flow.onCompletion"]},{"name":"fun <T> Flow<T>.onEach(action: suspend (T) -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.onEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-each.html","searchKeys":["onEach","fun <T> Flow<T>.onEach(action: suspend (T) -> Unit): Flow<T>","kotlinx.coroutines.flow.onEach"]},{"name":"fun <T> Flow<T>.onEmpty(action: suspend FlowCollector<T>.() -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.onEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-empty.html","searchKeys":["onEmpty","fun <T> Flow<T>.onEmpty(action: suspend FlowCollector<T>.() -> Unit): Flow<T>","kotlinx.coroutines.flow.onEmpty"]},{"name":"fun <T> Flow<T>.onStart(action: suspend FlowCollector<T>.() -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.onStart","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-start.html","searchKeys":["onStart","fun <T> Flow<T>.onStart(action: suspend FlowCollector<T>.() -> Unit): Flow<T>","kotlinx.coroutines.flow.onStart"]},{"name":"fun <T> Flow<T>.produceIn(scope: CoroutineScope): ReceiveChannel<T>","description":"kotlinx.coroutines.flow.produceIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/produce-in.html","searchKeys":["produceIn","fun <T> Flow<T>.produceIn(scope: CoroutineScope): ReceiveChannel<T>","kotlinx.coroutines.flow.produceIn"]},{"name":"fun <T> Flow<T>.retry(retries: Long = Long.MAX_VALUE, predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>","description":"kotlinx.coroutines.flow.retry","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry.html","searchKeys":["retry","fun <T> Flow<T>.retry(retries: Long = Long.MAX_VALUE, predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>","kotlinx.coroutines.flow.retry"]},{"name":"fun <T> Flow<T>.retryWhen(predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.retryWhen","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry-when.html","searchKeys":["retryWhen","fun <T> Flow<T>.retryWhen(predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>","kotlinx.coroutines.flow.retryWhen"]},{"name":"fun <T> Flow<T>.runningReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>","description":"kotlinx.coroutines.flow.runningReduce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/running-reduce.html","searchKeys":["runningReduce","fun <T> Flow<T>.runningReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>","kotlinx.coroutines.flow.runningReduce"]},{"name":"fun <T> Flow<T>.sample(period: Duration): Flow<T>","description":"kotlinx.coroutines.flow.sample","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/sample.html","searchKeys":["sample","fun <T> Flow<T>.sample(period: Duration): Flow<T>","kotlinx.coroutines.flow.sample"]},{"name":"fun <T> Flow<T>.sample(periodMillis: Long): Flow<T>","description":"kotlinx.coroutines.flow.sample","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/sample.html","searchKeys":["sample","fun <T> Flow<T>.sample(periodMillis: Long): Flow<T>","kotlinx.coroutines.flow.sample"]},{"name":"fun <T> Flow<T>.shareIn(scope: CoroutineScope, started: SharingStarted, replay: Int = 0): SharedFlow<T>","description":"kotlinx.coroutines.flow.shareIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/share-in.html","searchKeys":["shareIn","fun <T> Flow<T>.shareIn(scope: CoroutineScope, started: SharingStarted, replay: Int = 0): SharedFlow<T>","kotlinx.coroutines.flow.shareIn"]},{"name":"fun <T> Flow<T>.stateIn(scope: CoroutineScope, started: SharingStarted, initialValue: T): StateFlow<T>","description":"kotlinx.coroutines.flow.stateIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/state-in.html","searchKeys":["stateIn","fun <T> Flow<T>.stateIn(scope: CoroutineScope, started: SharingStarted, initialValue: T): StateFlow<T>","kotlinx.coroutines.flow.stateIn"]},{"name":"fun <T> Flow<T>.take(count: Int): Flow<T>","description":"kotlinx.coroutines.flow.take","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/take.html","searchKeys":["take","fun <T> Flow<T>.take(count: Int): Flow<T>","kotlinx.coroutines.flow.take"]},{"name":"fun <T> Flow<T>.takeWhile(predicate: suspend (T) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.takeWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/take-while.html","searchKeys":["takeWhile","fun <T> Flow<T>.takeWhile(predicate: suspend (T) -> Boolean): Flow<T>","kotlinx.coroutines.flow.takeWhile"]},{"name":"fun <T> Flow<T>.timeout(timeout: Duration): Flow<T>","description":"kotlinx.coroutines.flow.timeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/timeout.html","searchKeys":["timeout","fun <T> Flow<T>.timeout(timeout: Duration): Flow<T>","kotlinx.coroutines.flow.timeout"]},{"name":"fun <T> Flow<T>.withIndex(): Flow<IndexedValue<T>>","description":"kotlinx.coroutines.flow.withIndex","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/with-index.html","searchKeys":["withIndex","fun <T> Flow<T>.withIndex(): Flow<IndexedValue<T>>","kotlinx.coroutines.flow.withIndex"]},{"name":"fun <T> Iterable<Flow<T>>.merge(): Flow<T>","description":"kotlinx.coroutines.flow.merge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/merge.html","searchKeys":["merge","fun <T> Iterable<Flow<T>>.merge(): Flow<T>","kotlinx.coroutines.flow.merge"]},{"name":"fun <T> Iterable<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Iterable<T>.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> Iterator<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Iterator<T>.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> MutableSharedFlow(replay: Int = 0, extraBufferCapacity: Int = 0, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): MutableSharedFlow<T>","description":"kotlinx.coroutines.flow.MutableSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow.html","searchKeys":["MutableSharedFlow","fun <T> MutableSharedFlow(replay: Int = 0, extraBufferCapacity: Int = 0, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): MutableSharedFlow<T>","kotlinx.coroutines.flow.MutableSharedFlow"]},{"name":"fun <T> MutableSharedFlow<T>.asSharedFlow(): SharedFlow<T>","description":"kotlinx.coroutines.flow.asSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-shared-flow.html","searchKeys":["asSharedFlow","fun <T> MutableSharedFlow<T>.asSharedFlow(): SharedFlow<T>","kotlinx.coroutines.flow.asSharedFlow"]},{"name":"fun <T> MutableStateFlow(value: T): MutableStateFlow<T>","description":"kotlinx.coroutines.flow.MutableStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow.html","searchKeys":["MutableStateFlow","fun <T> MutableStateFlow(value: T): MutableStateFlow<T>","kotlinx.coroutines.flow.MutableStateFlow"]},{"name":"fun <T> MutableStateFlow<T>.asStateFlow(): StateFlow<T>","description":"kotlinx.coroutines.flow.asStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-state-flow.html","searchKeys":["asStateFlow","fun <T> MutableStateFlow<T>.asStateFlow(): StateFlow<T>","kotlinx.coroutines.flow.asStateFlow"]},{"name":"fun <T> Promise<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.asDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-deferred.html","searchKeys":["asDeferred","fun <T> Promise<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.asDeferred"]},{"name":"fun <T> ReceiveChannel<T>.consumeAsFlow(): Flow<T>","description":"kotlinx.coroutines.flow.consumeAsFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/consume-as-flow.html","searchKeys":["consumeAsFlow","fun <T> ReceiveChannel<T>.consumeAsFlow(): Flow<T>","kotlinx.coroutines.flow.consumeAsFlow"]},{"name":"fun <T> ReceiveChannel<T>.receiveAsFlow(): Flow<T>","description":"kotlinx.coroutines.flow.receiveAsFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/receive-as-flow.html","searchKeys":["receiveAsFlow","fun <T> ReceiveChannel<T>.receiveAsFlow(): Flow<T>","kotlinx.coroutines.flow.receiveAsFlow"]},{"name":"fun <T> Sequence<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Sequence<T>.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> SharedFlow<T>.onSubscription(action: suspend FlowCollector<T>.() -> Unit): SharedFlow<T>","description":"kotlinx.coroutines.flow.onSubscription","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-subscription.html","searchKeys":["onSubscription","fun <T> SharedFlow<T>.onSubscription(action: suspend FlowCollector<T>.() -> Unit): SharedFlow<T>","kotlinx.coroutines.flow.onSubscription"]},{"name":"fun <T> Stream<T>.consumeAsFlow(): <Error class: unknown class><T>","description":"kotlinx.coroutines.stream.consumeAsFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.stream/consume-as-flow.html","searchKeys":["consumeAsFlow","fun <T> Stream<T>.consumeAsFlow(): <Error class: unknown class><T>","kotlinx.coroutines.stream.consumeAsFlow"]},{"name":"fun <T> ThreadLocal<T>.asContextElement(value: T = get()): ThreadContextElement<T>","description":"kotlinx.coroutines.asContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-context-element.html","searchKeys":["asContextElement","fun <T> ThreadLocal<T>.asContextElement(value: T = get()): ThreadContextElement<T>","kotlinx.coroutines.asContextElement"]},{"name":"fun <T> callbackFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.callbackFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/callback-flow.html","searchKeys":["callbackFlow","fun <T> callbackFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>","kotlinx.coroutines.flow.callbackFlow"]},{"name":"fun <T> channelFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.channelFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/channel-flow.html","searchKeys":["channelFlow","fun <T> channelFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>","kotlinx.coroutines.flow.channelFlow"]},{"name":"fun <T> emptyFlow(): Flow<T>","description":"kotlinx.coroutines.flow.emptyFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/empty-flow.html","searchKeys":["emptyFlow","fun <T> emptyFlow(): Flow<T>","kotlinx.coroutines.flow.emptyFlow"]},{"name":"fun <T> flow(block: suspend FlowCollector<T>.() -> Unit): Flow<T>","description":"kotlinx.coroutines.flow.flow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html","searchKeys":["flow","fun <T> flow(block: suspend FlowCollector<T>.() -> Unit): Flow<T>","kotlinx.coroutines.flow.flow"]},{"name":"fun <T> flowOf(value: T): Flow<T>","description":"kotlinx.coroutines.flow.flowOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(value: T): Flow<T>","kotlinx.coroutines.flow.flowOf"]},{"name":"fun <T> flowOf(vararg elements: T): Flow<T>","description":"kotlinx.coroutines.flow.flowOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(vararg elements: T): Flow<T>","kotlinx.coroutines.flow.flowOf"]},{"name":"fun <T> merge(vararg flows: Flow<T>): Flow<T>","description":"kotlinx.coroutines.flow.merge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/merge.html","searchKeys":["merge","fun <T> merge(vararg flows: Flow<T>): Flow<T>","kotlinx.coroutines.flow.merge"]},{"name":"fun <T> suspend () -> T.asFlow(): Flow<T>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> suspend () -> T.asFlow(): Flow<T>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> suspend () -> T.startCoroutineCancellable(completion: Continuation<T>)","description":"kotlinx.coroutines.intrinsics.startCoroutineCancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines.intrinsics/start-coroutine-cancellable.html","searchKeys":["startCoroutineCancellable","fun <T> suspend () -> T.startCoroutineCancellable(completion: Continuation<T>)","kotlinx.coroutines.intrinsics.startCoroutineCancellable"]},{"name":"fun CancellableContinuation<*>.cancelFutureOnCancellation(future: Future<*>)","description":"kotlinx.coroutines.cancelFutureOnCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-future-on-cancellation.html","searchKeys":["cancelFutureOnCancellation","fun CancellableContinuation<*>.cancelFutureOnCancellation(future: Future<*>)","kotlinx.coroutines.cancelFutureOnCancellation"]},{"name":"fun CoroutineContext.cancel(cause: CancellationException? = null)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineContext.cancel(cause: CancellationException? = null)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineContext.cancelChildren(cause: CancellationException? = null)","description":"kotlinx.coroutines.cancelChildren","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-children.html","searchKeys":["cancelChildren","fun CoroutineContext.cancelChildren(cause: CancellationException? = null)","kotlinx.coroutines.cancelChildren"]},{"name":"fun CoroutineContext.ensureActive()","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun CoroutineContext.ensureActive()","kotlinx.coroutines.ensureActive"]},{"name":"fun CoroutineDispatcher.asExecutor(): Executor","description":"kotlinx.coroutines.asExecutor","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-executor.html","searchKeys":["asExecutor","fun CoroutineDispatcher.asExecutor(): Executor","kotlinx.coroutines.asExecutor"]},{"name":"fun CoroutineScope(context: CoroutineContext): CoroutineScope","description":"kotlinx.coroutines.CoroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html","searchKeys":["CoroutineScope","fun CoroutineScope(context: CoroutineContext): CoroutineScope","kotlinx.coroutines.CoroutineScope"]},{"name":"fun CoroutineScope.cancel(cause: CancellationException? = null)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineScope.cancel(cause: CancellationException? = null)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineScope.cancel(message: String, cause: Throwable? = null)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineScope.cancel(message: String, cause: Throwable? = null)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineScope.ensureActive()","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun CoroutineScope.ensureActive()","kotlinx.coroutines.ensureActive"]},{"name":"fun CoroutineScope.launch(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> Unit): Job","description":"kotlinx.coroutines.launch","location":"kotlinx-coroutines-core/kotlinx.coroutines/launch.html","searchKeys":["launch","fun CoroutineScope.launch(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> Unit): Job","kotlinx.coroutines.launch"]},{"name":"fun Executor.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Executor.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun ExecutorService.asCoroutineDispatcher(): ExecutorCoroutineDispatcher","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun ExecutorService.asCoroutineDispatcher(): ExecutorCoroutineDispatcher","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun IntArray.asFlow(): Flow<Int>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun IntArray.asFlow(): Flow<Int>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun IntRange.asFlow(): Flow<Int>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun IntRange.asFlow(): Flow<Int>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun Job(parent: Job? = null): CompletableJob","description":"kotlinx.coroutines.Job","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job.html","searchKeys":["Job","fun Job(parent: Job? = null): CompletableJob","kotlinx.coroutines.Job"]},{"name":"fun Job.cancel(message: String, cause: Throwable? = null)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun Job.cancel(message: String, cause: Throwable? = null)","kotlinx.coroutines.cancel"]},{"name":"fun Job.cancelChildren(cause: CancellationException? = null)","description":"kotlinx.coroutines.cancelChildren","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-children.html","searchKeys":["cancelChildren","fun Job.cancelChildren(cause: CancellationException? = null)","kotlinx.coroutines.cancelChildren"]},{"name":"fun Job.ensureActive()","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun Job.ensureActive()","kotlinx.coroutines.ensureActive"]},{"name":"fun LongArray.asFlow(): Flow<Long>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun LongArray.asFlow(): Flow<Long>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun LongRange.asFlow(): Flow<Long>","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun LongRange.asFlow(): Flow<Long>","kotlinx.coroutines.flow.asFlow"]},{"name":"fun MainScope(): CoroutineScope","description":"kotlinx.coroutines.MainScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html","searchKeys":["MainScope","fun MainScope(): CoroutineScope","kotlinx.coroutines.MainScope"]},{"name":"fun Mutex(locked: Boolean = false): Mutex","description":"kotlinx.coroutines.sync.Mutex","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex.html","searchKeys":["Mutex","fun Mutex(locked: Boolean = false): Mutex","kotlinx.coroutines.sync.Mutex"]},{"name":"fun Semaphore(permits: Int, acquiredPermits: Int = 0): Semaphore","description":"kotlinx.coroutines.sync.Semaphore","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore.html","searchKeys":["Semaphore","fun Semaphore(permits: Int, acquiredPermits: Int = 0): Semaphore","kotlinx.coroutines.sync.Semaphore"]},{"name":"fun SharingStarted.Companion.WhileSubscribed(stopTimeout: Duration = Duration.ZERO, replayExpiration: Duration = Duration.INFINITE): SharingStarted","description":"kotlinx.coroutines.flow.WhileSubscribed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-while-subscribed.html","searchKeys":["WhileSubscribed","fun SharingStarted.Companion.WhileSubscribed(stopTimeout: Duration = Duration.ZERO, replayExpiration: Duration = Duration.INFINITE): SharingStarted","kotlinx.coroutines.flow.WhileSubscribed"]},{"name":"fun SupervisorJob(parent: Job? = null): CompletableJob","description":"kotlinx.coroutines.SupervisorJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html","searchKeys":["SupervisorJob","fun SupervisorJob(parent: Job? = null): CompletableJob","kotlinx.coroutines.SupervisorJob"]},{"name":"fun WhileSubscribed(stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE): SharingStarted","description":"kotlinx.coroutines.flow.SharingStarted.Companion.WhileSubscribed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-while-subscribed.html","searchKeys":["WhileSubscribed","fun WhileSubscribed(stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE): SharingStarted","kotlinx.coroutines.flow.SharingStarted.Companion.WhileSubscribed"]},{"name":"fun Window.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Window.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun exceptionOrNull(): Throwable?","description":"kotlinx.coroutines.channels.ChannelResult.exceptionOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/exception-or-null.html","searchKeys":["exceptionOrNull","fun exceptionOrNull(): Throwable?","kotlinx.coroutines.channels.ChannelResult.exceptionOrNull"]},{"name":"fun getOrNull(): T?","description":"kotlinx.coroutines.channels.ChannelResult.getOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): T?","kotlinx.coroutines.channels.ChannelResult.getOrNull"]},{"name":"fun getOrThrow(): T","description":"kotlinx.coroutines.channels.ChannelResult.getOrThrow","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/get-or-throw.html","searchKeys":["getOrThrow","fun getOrThrow(): T","kotlinx.coroutines.channels.ChannelResult.getOrThrow"]},{"name":"fun handleCoroutineException(context: CoroutineContext, exception: Throwable)","description":"kotlinx.coroutines.handleCoroutineException","location":"kotlinx-coroutines-core/kotlinx.coroutines/handle-coroutine-exception.html","searchKeys":["handleCoroutineException","fun handleCoroutineException(context: CoroutineContext, exception: Throwable)","kotlinx.coroutines.handleCoroutineException"]},{"name":"fun interface DisposableHandle","description":"kotlinx.coroutines.DisposableHandle","location":"kotlinx-coroutines-core/kotlinx.coroutines/-disposable-handle/index.html","searchKeys":["DisposableHandle","fun interface DisposableHandle","kotlinx.coroutines.DisposableHandle"]},{"name":"fun interface FlowCollector<in T>","description":"kotlinx.coroutines.flow.FlowCollector","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/index.html","searchKeys":["FlowCollector","fun interface FlowCollector<in T>","kotlinx.coroutines.flow.FlowCollector"]},{"name":"fun interface SharingStarted","description":"kotlinx.coroutines.flow.SharingStarted","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/index.html","searchKeys":["SharingStarted","fun interface SharingStarted","kotlinx.coroutines.flow.SharingStarted"]},{"name":"fun shutdown()","description":"kotlinx.coroutines.Dispatchers.shutdown","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/shutdown.html","searchKeys":["shutdown","fun shutdown()","kotlinx.coroutines.Dispatchers.shutdown"]},{"name":"fun ticker(delayMillis: Long, initialDelayMillis: Long = delayMillis, context: CoroutineContext = EmptyCoroutineContext, mode: TickerMode = TickerMode.FIXED_PERIOD): ReceiveChannel<Unit>","description":"kotlinx.coroutines.channels.ticker","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html","searchKeys":["ticker","fun ticker(delayMillis: Long, initialDelayMillis: Long = delayMillis, context: CoroutineContext = EmptyCoroutineContext, mode: TickerMode = TickerMode.FIXED_PERIOD): ReceiveChannel<Unit>","kotlinx.coroutines.channels.ticker"]},{"name":"fun valueOf(value: String): BufferOverflow","description":"kotlinx.coroutines.channels.BufferOverflow.valueOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BufferOverflow","kotlinx.coroutines.channels.BufferOverflow.valueOf"]},{"name":"fun valueOf(value: String): CoroutineStart","description":"kotlinx.coroutines.CoroutineStart.valueOf","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CoroutineStart","kotlinx.coroutines.CoroutineStart.valueOf"]},{"name":"fun valueOf(value: String): SharingCommand","description":"kotlinx.coroutines.flow.SharingCommand.valueOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SharingCommand","kotlinx.coroutines.flow.SharingCommand.valueOf"]},{"name":"fun valueOf(value: String): TickerMode","description":"kotlinx.coroutines.channels.TickerMode.valueOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TickerMode","kotlinx.coroutines.channels.TickerMode.valueOf"]},{"name":"fun values(): Array<BufferOverflow>","description":"kotlinx.coroutines.channels.BufferOverflow.values","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/values.html","searchKeys":["values","fun values(): Array<BufferOverflow>","kotlinx.coroutines.channels.BufferOverflow.values"]},{"name":"fun values(): Array<CoroutineStart>","description":"kotlinx.coroutines.CoroutineStart.values","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/values.html","searchKeys":["values","fun values(): Array<CoroutineStart>","kotlinx.coroutines.CoroutineStart.values"]},{"name":"fun values(): Array<SharingCommand>","description":"kotlinx.coroutines.flow.SharingCommand.values","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/values.html","searchKeys":["values","fun values(): Array<SharingCommand>","kotlinx.coroutines.flow.SharingCommand.values"]},{"name":"fun values(): Array<TickerMode>","description":"kotlinx.coroutines.channels.TickerMode.values","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/values.html","searchKeys":["values","fun values(): Array<TickerMode>","kotlinx.coroutines.channels.TickerMode.values"]},{"name":"inline fun <E, R> BroadcastChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R","description":"kotlinx.coroutines.channels.consume","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume.html","searchKeys":["consume","inline fun <E, R> BroadcastChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R","kotlinx.coroutines.channels.consume"]},{"name":"inline fun <E, R> ReceiveChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R","description":"kotlinx.coroutines.channels.consume","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume.html","searchKeys":["consume","inline fun <E, R> ReceiveChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R","kotlinx.coroutines.channels.consume"]},{"name":"inline fun <R> Flow<*>.filterIsInstance(): Flow<R>","description":"kotlinx.coroutines.flow.filterIsInstance","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <R> Flow<*>.filterIsInstance(): Flow<R>","kotlinx.coroutines.flow.filterIsInstance"]},{"name":"inline fun <T, R : Any> Flow<T>.mapNotNull(crossinline transform: suspend (value: T) -> R?): Flow<R>","description":"kotlinx.coroutines.flow.mapNotNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map-not-null.html","searchKeys":["mapNotNull","inline fun <T, R : Any> Flow<T>.mapNotNull(crossinline transform: suspend (value: T) -> R?): Flow<R>","kotlinx.coroutines.flow.mapNotNull"]},{"name":"inline fun <T, R> Flow<T>.flatMapLatest(crossinline transform: suspend (value: T) -> Flow<R>): Flow<R>","description":"kotlinx.coroutines.flow.flatMapLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html","searchKeys":["flatMapLatest","inline fun <T, R> Flow<T>.flatMapLatest(crossinline transform: suspend (value: T) -> Flow<R>): Flow<R>","kotlinx.coroutines.flow.flatMapLatest"]},{"name":"inline fun <T, R> Flow<T>.map(crossinline transform: suspend (value: T) -> R): Flow<R>","description":"kotlinx.coroutines.flow.map","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html","searchKeys":["map","inline fun <T, R> Flow<T>.map(crossinline transform: suspend (value: T) -> R): Flow<R>","kotlinx.coroutines.flow.map"]},{"name":"inline fun <T, R> Flow<T>.transform(crossinline transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.transform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform.html","searchKeys":["transform","inline fun <T, R> Flow<T>.transform(crossinline transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>","kotlinx.coroutines.flow.transform"]},{"name":"inline fun <T, R> combine(flows: Iterable<Flow<T>>, crossinline transform: suspend (Array<T>) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","inline fun <T, R> combine(flows: Iterable<Flow<T>>, crossinline transform: suspend (Array<T>) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"inline fun <T, R> combine(vararg flows: Flow<T>, crossinline transform: suspend (Array<T>) -> R): Flow<R>","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","inline fun <T, R> combine(vararg flows: Flow<T>, crossinline transform: suspend (Array<T>) -> R): Flow<R>","kotlinx.coroutines.flow.combine"]},{"name":"inline fun <T, R> combineTransform(flows: Iterable<Flow<T>>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","inline fun <T, R> combineTransform(flows: Iterable<Flow<T>>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"inline fun <T, R> combineTransform(vararg flows: Flow<T>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","inline fun <T, R> combineTransform(vararg flows: Flow<T>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>","kotlinx.coroutines.flow.combineTransform"]},{"name":"inline fun <T> ChannelResult<T>.getOrElse(onFailure: (exception: Throwable?) -> T): T","description":"kotlinx.coroutines.channels.getOrElse","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/get-or-else.html","searchKeys":["getOrElse","inline fun <T> ChannelResult<T>.getOrElse(onFailure: (exception: Throwable?) -> T): T","kotlinx.coroutines.channels.getOrElse"]},{"name":"inline fun <T> ChannelResult<T>.onClosed(action: (exception: Throwable?) -> Unit): ChannelResult<T>","description":"kotlinx.coroutines.channels.onClosed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-closed.html","searchKeys":["onClosed","inline fun <T> ChannelResult<T>.onClosed(action: (exception: Throwable?) -> Unit): ChannelResult<T>","kotlinx.coroutines.channels.onClosed"]},{"name":"inline fun <T> ChannelResult<T>.onFailure(action: (exception: Throwable?) -> Unit): ChannelResult<T>","description":"kotlinx.coroutines.channels.onFailure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-failure.html","searchKeys":["onFailure","inline fun <T> ChannelResult<T>.onFailure(action: (exception: Throwable?) -> Unit): ChannelResult<T>","kotlinx.coroutines.channels.onFailure"]},{"name":"inline fun <T> ChannelResult<T>.onSuccess(action: (value: T) -> Unit): ChannelResult<T>","description":"kotlinx.coroutines.channels.onSuccess","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-success.html","searchKeys":["onSuccess","inline fun <T> ChannelResult<T>.onSuccess(action: (value: T) -> Unit): ChannelResult<T>","kotlinx.coroutines.channels.onSuccess"]},{"name":"inline fun <T> Flow<T>.filter(crossinline predicate: suspend (T) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.filter","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html","searchKeys":["filter","inline fun <T> Flow<T>.filter(crossinline predicate: suspend (T) -> Boolean): Flow<T>","kotlinx.coroutines.flow.filter"]},{"name":"inline fun <T> Flow<T>.filterNot(crossinline predicate: suspend (T) -> Boolean): Flow<T>","description":"kotlinx.coroutines.flow.filterNot","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-not.html","searchKeys":["filterNot","inline fun <T> Flow<T>.filterNot(crossinline predicate: suspend (T) -> Boolean): Flow<T>","kotlinx.coroutines.flow.filterNot"]},{"name":"inline fun <T> MutableStateFlow<T>.getAndUpdate(function: (T) -> T): T","description":"kotlinx.coroutines.flow.getAndUpdate","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/get-and-update.html","searchKeys":["getAndUpdate","inline fun <T> MutableStateFlow<T>.getAndUpdate(function: (T) -> T): T","kotlinx.coroutines.flow.getAndUpdate"]},{"name":"inline fun <T> MutableStateFlow<T>.update(function: (T) -> T)","description":"kotlinx.coroutines.flow.update","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/update.html","searchKeys":["update","inline fun <T> MutableStateFlow<T>.update(function: (T) -> T)","kotlinx.coroutines.flow.update"]},{"name":"inline fun <T> MutableStateFlow<T>.updateAndGet(function: (T) -> T): T","description":"kotlinx.coroutines.flow.updateAndGet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/update-and-get.html","searchKeys":["updateAndGet","inline fun <T> MutableStateFlow<T>.updateAndGet(function: (T) -> T): T","kotlinx.coroutines.flow.updateAndGet"]},{"name":"inline fun CoroutineExceptionHandler(crossinline handler: (CoroutineContext, Throwable) -> Unit): CoroutineExceptionHandler","description":"kotlinx.coroutines.CoroutineExceptionHandler","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler.html","searchKeys":["CoroutineExceptionHandler","inline fun CoroutineExceptionHandler(crossinline handler: (CoroutineContext, Throwable) -> Unit): CoroutineExceptionHandler","kotlinx.coroutines.CoroutineExceptionHandler"]},{"name":"inline suspend fun <E> BroadcastChannel<E>.consumeEach(action: (E) -> Unit)","description":"kotlinx.coroutines.channels.consumeEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html","searchKeys":["consumeEach","inline suspend fun <E> BroadcastChannel<E>.consumeEach(action: (E) -> Unit)","kotlinx.coroutines.channels.consumeEach"]},{"name":"inline suspend fun <E> ReceiveChannel<E>.consumeEach(action: (E) -> Unit)","description":"kotlinx.coroutines.channels.consumeEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html","searchKeys":["consumeEach","inline suspend fun <E> ReceiveChannel<E>.consumeEach(action: (E) -> Unit)","kotlinx.coroutines.channels.consumeEach"]},{"name":"inline suspend fun <R> select(crossinline builder: SelectBuilder<R>.() -> Unit): R","description":"kotlinx.coroutines.selects.select","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/select.html","searchKeys":["select","inline suspend fun <R> select(crossinline builder: SelectBuilder<R>.() -> Unit): R","kotlinx.coroutines.selects.select"]},{"name":"inline suspend fun <R> selectUnbiased(crossinline builder: SelectBuilder<R>.() -> Unit): R","description":"kotlinx.coroutines.selects.selectUnbiased","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/select-unbiased.html","searchKeys":["selectUnbiased","inline suspend fun <R> selectUnbiased(crossinline builder: SelectBuilder<R>.() -> Unit): R","kotlinx.coroutines.selects.selectUnbiased"]},{"name":"inline suspend fun <T, R> Flow<T>.fold(initial: R, crossinline operation: suspend (acc: R, value: T) -> R): R","description":"kotlinx.coroutines.flow.fold","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/fold.html","searchKeys":["fold","inline suspend fun <T, R> Flow<T>.fold(initial: R, crossinline operation: suspend (acc: R, value: T) -> R): R","kotlinx.coroutines.flow.fold"]},{"name":"inline suspend fun <T> Flow<T>.collectIndexed(crossinline action: suspend (index: Int, value: T) -> Unit)","description":"kotlinx.coroutines.flow.collectIndexed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-indexed.html","searchKeys":["collectIndexed","inline suspend fun <T> Flow<T>.collectIndexed(crossinline action: suspend (index: Int, value: T) -> Unit)","kotlinx.coroutines.flow.collectIndexed"]},{"name":"inline suspend fun <T> Mutex.withLock(owner: Any? = null, action: () -> T): T","description":"kotlinx.coroutines.sync.withLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/with-lock.html","searchKeys":["withLock","inline suspend fun <T> Mutex.withLock(owner: Any? = null, action: () -> T): T","kotlinx.coroutines.sync.withLock"]},{"name":"inline suspend fun <T> Semaphore.withPermit(action: () -> T): T","description":"kotlinx.coroutines.sync.withPermit","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/with-permit.html","searchKeys":["withPermit","inline suspend fun <T> Semaphore.withPermit(action: () -> T): T","kotlinx.coroutines.sync.withPermit"]},{"name":"inline suspend fun <T> SharedFlow<T>.toList(destination: MutableList<T>): Nothing","description":"kotlinx.coroutines.flow.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-list.html","searchKeys":["toList","inline suspend fun <T> SharedFlow<T>.toList(destination: MutableList<T>): Nothing","kotlinx.coroutines.flow.toList"]},{"name":"inline suspend fun <T> SharedFlow<T>.toSet(destination: MutableSet<T>): Nothing","description":"kotlinx.coroutines.flow.toSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-set.html","searchKeys":["toSet","inline suspend fun <T> SharedFlow<T>.toSet(destination: MutableSet<T>): Nothing","kotlinx.coroutines.flow.toSet"]},{"name":"inline suspend fun <T> suspendCancellableCoroutine(crossinline block: (CancellableContinuation<T>) -> Unit): T","description":"kotlinx.coroutines.suspendCancellableCoroutine","location":"kotlinx-coroutines-core/kotlinx.coroutines/suspend-cancellable-coroutine.html","searchKeys":["suspendCancellableCoroutine","inline suspend fun <T> suspendCancellableCoroutine(crossinline block: (CancellableContinuation<T>) -> Unit): T","kotlinx.coroutines.suspendCancellableCoroutine"]},{"name":"inline suspend fun ThreadLocal<*>.ensurePresent()","description":"kotlinx.coroutines.ensurePresent","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html","searchKeys":["ensurePresent","inline suspend fun ThreadLocal<*>.ensurePresent()","kotlinx.coroutines.ensurePresent"]},{"name":"inline suspend fun ThreadLocal<*>.isPresent(): Boolean","description":"kotlinx.coroutines.isPresent","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-present.html","searchKeys":["isPresent","inline suspend fun ThreadLocal<*>.isPresent(): Boolean","kotlinx.coroutines.isPresent"]},{"name":"inline suspend fun currentCoroutineContext(): CoroutineContext","description":"kotlinx.coroutines.currentCoroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/current-coroutine-context.html","searchKeys":["currentCoroutineContext","inline suspend fun currentCoroutineContext(): CoroutineContext","kotlinx.coroutines.currentCoroutineContext"]},{"name":"inline suspend fun whileSelect(crossinline builder: SelectBuilder<Boolean>.() -> Unit)","description":"kotlinx.coroutines.selects.whileSelect","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/while-select.html","searchKeys":["whileSelect","inline suspend fun whileSelect(crossinline builder: SelectBuilder<Boolean>.() -> Unit)","kotlinx.coroutines.selects.whileSelect"]},{"name":"inline suspend operator fun <T> CoroutineDispatcher.invoke(noinline block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines/invoke.html","searchKeys":["invoke","inline suspend operator fun <T> CoroutineDispatcher.invoke(noinline block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.invoke"]},{"name":"interface ActorScope<E> : CoroutineScope, ReceiveChannel<E> ","description":"kotlinx.coroutines.channels.ActorScope","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-actor-scope/index.html","searchKeys":["ActorScope","interface ActorScope<E> : CoroutineScope, ReceiveChannel<E> ","kotlinx.coroutines.channels.ActorScope"]},{"name":"interface BroadcastChannel<E> : SendChannel<E> ","description":"kotlinx.coroutines.channels.BroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/index.html","searchKeys":["BroadcastChannel","interface BroadcastChannel<E> : SendChannel<E> ","kotlinx.coroutines.channels.BroadcastChannel"]},{"name":"interface CancellableContinuation<in T> : Continuation<T> ","description":"kotlinx.coroutines.CancellableContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/index.html","searchKeys":["CancellableContinuation","interface CancellableContinuation<in T> : Continuation<T> ","kotlinx.coroutines.CancellableContinuation"]},{"name":"interface Channel<E> : SendChannel<E> , ReceiveChannel<E> ","description":"kotlinx.coroutines.channels.Channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html","searchKeys":["Channel","interface Channel<E> : SendChannel<E> , ReceiveChannel<E> ","kotlinx.coroutines.channels.Channel"]},{"name":"interface ChannelIterator<out E>","description":"kotlinx.coroutines.channels.ChannelIterator","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/index.html","searchKeys":["ChannelIterator","interface ChannelIterator<out E>","kotlinx.coroutines.channels.ChannelIterator"]},{"name":"interface CompletableDeferred<T> : Deferred<T> ","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html","searchKeys":["CompletableDeferred","interface CompletableDeferred<T> : Deferred<T> ","kotlinx.coroutines.CompletableDeferred"]},{"name":"interface CompletableJob : Job","description":"kotlinx.coroutines.CompletableJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/index.html","searchKeys":["CompletableJob","interface CompletableJob : Job","kotlinx.coroutines.CompletableJob"]},{"name":"interface CopyableThreadContextElement<S> : ThreadContextElement<S> ","description":"kotlinx.coroutines.CopyableThreadContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/index.html","searchKeys":["CopyableThreadContextElement","interface CopyableThreadContextElement<S> : ThreadContextElement<S> ","kotlinx.coroutines.CopyableThreadContextElement"]},{"name":"interface CopyableThrowable<T : Throwable, CopyableThrowable<T>>","description":"kotlinx.coroutines.CopyableThrowable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-throwable/index.html","searchKeys":["CopyableThrowable","interface CopyableThrowable<T : Throwable, CopyableThrowable<T>>","kotlinx.coroutines.CopyableThrowable"]},{"name":"interface CoroutineExceptionHandler : CoroutineContext.Element","description":"kotlinx.coroutines.CoroutineExceptionHandler","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html","searchKeys":["CoroutineExceptionHandler","interface CoroutineExceptionHandler : CoroutineContext.Element","kotlinx.coroutines.CoroutineExceptionHandler"]},{"name":"interface CoroutineScope","description":"kotlinx.coroutines.CoroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html","searchKeys":["CoroutineScope","interface CoroutineScope","kotlinx.coroutines.CoroutineScope"]},{"name":"interface Deferred<out T> : Job","description":"kotlinx.coroutines.Deferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html","searchKeys":["Deferred","interface Deferred<out T> : Job","kotlinx.coroutines.Deferred"]},{"name":"interface Flow<out T>","description":"kotlinx.coroutines.flow.Flow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html","searchKeys":["Flow","interface Flow<out T>","kotlinx.coroutines.flow.Flow"]},{"name":"interface Job : CoroutineContext.Element","description":"kotlinx.coroutines.Job","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html","searchKeys":["Job","interface Job : CoroutineContext.Element","kotlinx.coroutines.Job"]},{"name":"interface MutableSharedFlow<T> : SharedFlow<T> , FlowCollector<T> ","description":"kotlinx.coroutines.flow.MutableSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/index.html","searchKeys":["MutableSharedFlow","interface MutableSharedFlow<T> : SharedFlow<T> , FlowCollector<T> ","kotlinx.coroutines.flow.MutableSharedFlow"]},{"name":"interface MutableStateFlow<T> : StateFlow<T> , MutableSharedFlow<T> ","description":"kotlinx.coroutines.flow.MutableStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/index.html","searchKeys":["MutableStateFlow","interface MutableStateFlow<T> : StateFlow<T> , MutableSharedFlow<T> ","kotlinx.coroutines.flow.MutableStateFlow"]},{"name":"interface Mutex","description":"kotlinx.coroutines.sync.Mutex","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html","searchKeys":["Mutex","interface Mutex","kotlinx.coroutines.sync.Mutex"]},{"name":"interface ProducerScope<in E> : CoroutineScope, SendChannel<E> ","description":"kotlinx.coroutines.channels.ProducerScope","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-producer-scope/index.html","searchKeys":["ProducerScope","interface ProducerScope<in E> : CoroutineScope, SendChannel<E> ","kotlinx.coroutines.channels.ProducerScope"]},{"name":"interface ReceiveChannel<out E>","description":"kotlinx.coroutines.channels.ReceiveChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/index.html","searchKeys":["ReceiveChannel","interface ReceiveChannel<out E>","kotlinx.coroutines.channels.ReceiveChannel"]},{"name":"interface SelectBuilder<in R>","description":"kotlinx.coroutines.selects.SelectBuilder","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/index.html","searchKeys":["SelectBuilder","interface SelectBuilder<in R>","kotlinx.coroutines.selects.SelectBuilder"]},{"name":"interface SelectClause","description":"kotlinx.coroutines.selects.SelectClause","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause/index.html","searchKeys":["SelectClause","interface SelectClause","kotlinx.coroutines.selects.SelectClause"]},{"name":"interface SelectClause0 : SelectClause","description":"kotlinx.coroutines.selects.SelectClause0","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause0/index.html","searchKeys":["SelectClause0","interface SelectClause0 : SelectClause","kotlinx.coroutines.selects.SelectClause0"]},{"name":"interface SelectClause1<out Q> : SelectClause","description":"kotlinx.coroutines.selects.SelectClause1","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause1/index.html","searchKeys":["SelectClause1","interface SelectClause1<out Q> : SelectClause","kotlinx.coroutines.selects.SelectClause1"]},{"name":"interface SelectClause2<in P, out Q> : SelectClause","description":"kotlinx.coroutines.selects.SelectClause2","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause2/index.html","searchKeys":["SelectClause2","interface SelectClause2<in P, out Q> : SelectClause","kotlinx.coroutines.selects.SelectClause2"]},{"name":"interface Semaphore","description":"kotlinx.coroutines.sync.Semaphore","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/index.html","searchKeys":["Semaphore","interface Semaphore","kotlinx.coroutines.sync.Semaphore"]},{"name":"interface SendChannel<in E>","description":"kotlinx.coroutines.channels.SendChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/index.html","searchKeys":["SendChannel","interface SendChannel<in E>","kotlinx.coroutines.channels.SendChannel"]},{"name":"interface SharedFlow<out T> : Flow<T> ","description":"kotlinx.coroutines.flow.SharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/index.html","searchKeys":["SharedFlow","interface SharedFlow<out T> : Flow<T> ","kotlinx.coroutines.flow.SharedFlow"]},{"name":"interface StateFlow<out T> : SharedFlow<T> ","description":"kotlinx.coroutines.flow.StateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/index.html","searchKeys":["StateFlow","interface StateFlow<out T> : SharedFlow<T> ","kotlinx.coroutines.flow.StateFlow"]},{"name":"interface ThreadContextElement<S> : CoroutineContext.Element","description":"kotlinx.coroutines.ThreadContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/index.html","searchKeys":["ThreadContextElement","interface ThreadContextElement<S> : CoroutineContext.Element","kotlinx.coroutines.ThreadContextElement"]},{"name":"object Companion","description":"kotlinx.coroutines.channels.ChannelResult.Companion","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/index.html","searchKeys":["Companion","object Companion","kotlinx.coroutines.channels.ChannelResult.Companion"]},{"name":"object Companion","description":"kotlinx.coroutines.flow.SharingStarted.Companion","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/index.html","searchKeys":["Companion","object Companion","kotlinx.coroutines.flow.SharingStarted.Companion"]},{"name":"object Factory","description":"kotlinx.coroutines.channels.Channel.Factory","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/index.html","searchKeys":["Factory","object Factory","kotlinx.coroutines.channels.Channel.Factory"]},{"name":"object GlobalScope : CoroutineScope","description":"kotlinx.coroutines.GlobalScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html","searchKeys":["GlobalScope","object GlobalScope : CoroutineScope","kotlinx.coroutines.GlobalScope"]},{"name":"object Key : CoroutineContext.Key<CoroutineExceptionHandler> ","description":"kotlinx.coroutines.CoroutineExceptionHandler.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<CoroutineExceptionHandler> ","kotlinx.coroutines.CoroutineExceptionHandler.Key"]},{"name":"object Key : CoroutineContext.Key<CoroutineName> ","description":"kotlinx.coroutines.CoroutineName.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<CoroutineName> ","kotlinx.coroutines.CoroutineName.Key"]},{"name":"object Key : CoroutineContext.Key<Job> ","description":"kotlinx.coroutines.Job.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<Job> ","kotlinx.coroutines.Job.Key"]},{"name":"object NonCancellable : AbstractCoroutineContextElement, Job","description":"kotlinx.coroutines.NonCancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/index.html","searchKeys":["NonCancellable","object NonCancellable : AbstractCoroutineContextElement, Job","kotlinx.coroutines.NonCancellable"]},{"name":"open fun isDispatchNeeded(context: CoroutineContext): Boolean","description":"kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/is-dispatch-needed.html","searchKeys":["isDispatchNeeded","open fun isDispatchNeeded(context: CoroutineContext): Boolean","kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded"]},{"name":"open fun limitedParallelism(parallelism: Int): CoroutineDispatcher","description":"kotlinx.coroutines.CoroutineDispatcher.limitedParallelism","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/limited-parallelism.html","searchKeys":["limitedParallelism","open fun limitedParallelism(parallelism: Int): CoroutineDispatcher","kotlinx.coroutines.CoroutineDispatcher.limitedParallelism"]},{"name":"open fun onTimeout(timeMillis: Long, block: suspend () -> R)","description":"kotlinx.coroutines.selects.SelectBuilder.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/on-timeout.html","searchKeys":["onTimeout","open fun onTimeout(timeMillis: Long, block: suspend () -> R)","kotlinx.coroutines.selects.SelectBuilder.onTimeout"]},{"name":"open operator fun <P, Q> SelectClause2<P?, Q>.invoke(block: suspend (Q) -> R)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","open operator fun <P, Q> SelectClause2<P?, Q>.invoke(block: suspend (Q) -> R)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"open override fun createCopy(): TimeoutCancellationException","description":"kotlinx.coroutines.TimeoutCancellationException.createCopy","location":"kotlinx-coroutines-core/kotlinx.coroutines/-timeout-cancellation-exception/create-copy.html","searchKeys":["createCopy","open override fun createCopy(): TimeoutCancellationException","kotlinx.coroutines.TimeoutCancellationException.createCopy"]},{"name":"open override fun limitedParallelism(parallelism: Int): CoroutineDispatcher","description":"kotlinx.coroutines.MainCoroutineDispatcher.limitedParallelism","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/limited-parallelism.html","searchKeys":["limitedParallelism","open override fun limitedParallelism(parallelism: Int): CoroutineDispatcher","kotlinx.coroutines.MainCoroutineDispatcher.limitedParallelism"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.CoroutineName.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.CoroutineName.toString"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.MainCoroutineDispatcher.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.MainCoroutineDispatcher.toString"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.channels.ChannelResult.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.channels.ChannelResult.toString"]},{"name":"open override val coroutineContext: CoroutineContext","description":"kotlinx.coroutines.GlobalScope.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext","kotlinx.coroutines.GlobalScope.coroutineContext"]},{"name":"operator fun CoroutineScope.plus(context: CoroutineContext): CoroutineScope","description":"kotlinx.coroutines.plus","location":"kotlinx-coroutines-core/kotlinx.coroutines/plus.html","searchKeys":["plus","operator fun CoroutineScope.plus(context: CoroutineContext): CoroutineScope","kotlinx.coroutines.plus"]},{"name":"override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>","description":"kotlinx.coroutines.CoroutineDispatcher.interceptContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/intercept-continuation.html","searchKeys":["interceptContinuation","override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>","kotlinx.coroutines.CoroutineDispatcher.interceptContinuation"]},{"name":"override fun releaseInterceptedContinuation(continuation: Continuation<*>)","description":"kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/release-intercepted-continuation.html","searchKeys":["releaseInterceptedContinuation","override fun releaseInterceptedContinuation(continuation: Continuation<*>)","kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation"]},{"name":"suspend fun <E> ReceiveChannel<E>.toList(): List<E>","description":"kotlinx.coroutines.channels.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/to-list.html","searchKeys":["toList","suspend fun <E> ReceiveChannel<E>.toList(): List<E>","kotlinx.coroutines.channels.toList"]},{"name":"suspend fun <R> coroutineScope(block: suspend CoroutineScope.() -> R): R","description":"kotlinx.coroutines.coroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html","searchKeys":["coroutineScope","suspend fun <R> coroutineScope(block: suspend CoroutineScope.() -> R): R","kotlinx.coroutines.coroutineScope"]},{"name":"suspend fun <R> supervisorScope(block: suspend CoroutineScope.() -> R): R","description":"kotlinx.coroutines.supervisorScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html","searchKeys":["supervisorScope","suspend fun <R> supervisorScope(block: suspend CoroutineScope.() -> R): R","kotlinx.coroutines.supervisorScope"]},{"name":"suspend fun <S, T : S> Flow<T>.reduce(operation: suspend (accumulator: S, value: T) -> S): S","description":"kotlinx.coroutines.flow.reduce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/reduce.html","searchKeys":["reduce","suspend fun <S, T : S> Flow<T>.reduce(operation: suspend (accumulator: S, value: T) -> S): S","kotlinx.coroutines.flow.reduce"]},{"name":"suspend fun <T, C : MutableCollection<in T>> Flow<T>.toCollection(destination: C): C","description":"kotlinx.coroutines.flow.toCollection","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-collection.html","searchKeys":["toCollection","suspend fun <T, C : MutableCollection<in T>> Flow<T>.toCollection(destination: C): C","kotlinx.coroutines.flow.toCollection"]},{"name":"suspend fun <T> Collection<Deferred<T>>.awaitAll(): List<T>","description":"kotlinx.coroutines.awaitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-all.html","searchKeys":["awaitAll","suspend fun <T> Collection<Deferred<T>>.awaitAll(): List<T>","kotlinx.coroutines.awaitAll"]},{"name":"suspend fun <T> CompletionStage<T>.await(): T","description":"kotlinx.coroutines.future.await","location":"kotlinx-coroutines-core/kotlinx.coroutines.future/await.html","searchKeys":["await","suspend fun <T> CompletionStage<T>.await(): T","kotlinx.coroutines.future.await"]},{"name":"suspend fun <T> Flow<T>.collectLatest(action: suspend (value: T) -> Unit)","description":"kotlinx.coroutines.flow.collectLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-latest.html","searchKeys":["collectLatest","suspend fun <T> Flow<T>.collectLatest(action: suspend (value: T) -> Unit)","kotlinx.coroutines.flow.collectLatest"]},{"name":"suspend fun <T> Flow<T>.count(): Int","description":"kotlinx.coroutines.flow.count","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/count.html","searchKeys":["count","suspend fun <T> Flow<T>.count(): Int","kotlinx.coroutines.flow.count"]},{"name":"suspend fun <T> Flow<T>.count(predicate: suspend (T) -> Boolean): Int","description":"kotlinx.coroutines.flow.count","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/count.html","searchKeys":["count","suspend fun <T> Flow<T>.count(predicate: suspend (T) -> Boolean): Int","kotlinx.coroutines.flow.count"]},{"name":"suspend fun <T> Flow<T>.first(): T","description":"kotlinx.coroutines.flow.first","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first.html","searchKeys":["first","suspend fun <T> Flow<T>.first(): T","kotlinx.coroutines.flow.first"]},{"name":"suspend fun <T> Flow<T>.first(predicate: suspend (T) -> Boolean): T","description":"kotlinx.coroutines.flow.first","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first.html","searchKeys":["first","suspend fun <T> Flow<T>.first(predicate: suspend (T) -> Boolean): T","kotlinx.coroutines.flow.first"]},{"name":"suspend fun <T> Flow<T>.firstOrNull(): T?","description":"kotlinx.coroutines.flow.firstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first-or-null.html","searchKeys":["firstOrNull","suspend fun <T> Flow<T>.firstOrNull(): T?","kotlinx.coroutines.flow.firstOrNull"]},{"name":"suspend fun <T> Flow<T>.firstOrNull(predicate: suspend (T) -> Boolean): T?","description":"kotlinx.coroutines.flow.firstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first-or-null.html","searchKeys":["firstOrNull","suspend fun <T> Flow<T>.firstOrNull(predicate: suspend (T) -> Boolean): T?","kotlinx.coroutines.flow.firstOrNull"]},{"name":"suspend fun <T> Flow<T>.last(): T","description":"kotlinx.coroutines.flow.last","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/last.html","searchKeys":["last","suspend fun <T> Flow<T>.last(): T","kotlinx.coroutines.flow.last"]},{"name":"suspend fun <T> Flow<T>.lastOrNull(): T?","description":"kotlinx.coroutines.flow.lastOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/last-or-null.html","searchKeys":["lastOrNull","suspend fun <T> Flow<T>.lastOrNull(): T?","kotlinx.coroutines.flow.lastOrNull"]},{"name":"suspend fun <T> Flow<T>.single(): T","description":"kotlinx.coroutines.flow.single","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/single.html","searchKeys":["single","suspend fun <T> Flow<T>.single(): T","kotlinx.coroutines.flow.single"]},{"name":"suspend fun <T> Flow<T>.singleOrNull(): T?","description":"kotlinx.coroutines.flow.singleOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/single-or-null.html","searchKeys":["singleOrNull","suspend fun <T> Flow<T>.singleOrNull(): T?","kotlinx.coroutines.flow.singleOrNull"]},{"name":"suspend fun <T> Flow<T>.stateIn(scope: CoroutineScope): StateFlow<T>","description":"kotlinx.coroutines.flow.stateIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/state-in.html","searchKeys":["stateIn","suspend fun <T> Flow<T>.stateIn(scope: CoroutineScope): StateFlow<T>","kotlinx.coroutines.flow.stateIn"]},{"name":"suspend fun <T> Flow<T>.toList(destination: MutableList<T> = ArrayList()): List<T>","description":"kotlinx.coroutines.flow.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(destination: MutableList<T> = ArrayList()): List<T>","kotlinx.coroutines.flow.toList"]},{"name":"suspend fun <T> Flow<T>.toSet(destination: MutableSet<T> = LinkedHashSet()): Set<T>","description":"kotlinx.coroutines.flow.toSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-set.html","searchKeys":["toSet","suspend fun <T> Flow<T>.toSet(destination: MutableSet<T> = LinkedHashSet()): Set<T>","kotlinx.coroutines.flow.toSet"]},{"name":"suspend fun <T> FlowCollector<T>.emitAll(channel: ReceiveChannel<T>)","description":"kotlinx.coroutines.flow.emitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/emit-all.html","searchKeys":["emitAll","suspend fun <T> FlowCollector<T>.emitAll(channel: ReceiveChannel<T>)","kotlinx.coroutines.flow.emitAll"]},{"name":"suspend fun <T> FlowCollector<T>.emitAll(flow: Flow<T>)","description":"kotlinx.coroutines.flow.emitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/emit-all.html","searchKeys":["emitAll","suspend fun <T> FlowCollector<T>.emitAll(flow: Flow<T>)","kotlinx.coroutines.flow.emitAll"]},{"name":"suspend fun <T> Promise<T>.await(): T","description":"kotlinx.coroutines.await","location":"kotlinx-coroutines-core/kotlinx.coroutines/await.html","searchKeys":["await","suspend fun <T> Promise<T>.await(): T","kotlinx.coroutines.await"]},{"name":"suspend fun <T> awaitAll(vararg deferreds: Deferred<T>): List<T>","description":"kotlinx.coroutines.awaitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-all.html","searchKeys":["awaitAll","suspend fun <T> awaitAll(vararg deferreds: Deferred<T>): List<T>","kotlinx.coroutines.awaitAll"]},{"name":"suspend fun <T> runInterruptible(context: CoroutineContext = EmptyCoroutineContext, block: () -> T): T","description":"kotlinx.coroutines.runInterruptible","location":"kotlinx-coroutines-core/kotlinx.coroutines/run-interruptible.html","searchKeys":["runInterruptible","suspend fun <T> runInterruptible(context: CoroutineContext = EmptyCoroutineContext, block: () -> T): T","kotlinx.coroutines.runInterruptible"]},{"name":"suspend fun <T> withContext(context: CoroutineContext, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.withContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-context.html","searchKeys":["withContext","suspend fun <T> withContext(context: CoroutineContext, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.withContext"]},{"name":"suspend fun <T> withTimeout(duration: Duration, block: suspend <Error class: unknown class>.() -> T): T","description":"kotlinx.coroutines.time.withTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(duration: Duration, block: suspend <Error class: unknown class>.() -> T): T","kotlinx.coroutines.time.withTimeout"]},{"name":"suspend fun <T> withTimeout(timeMillis: Long, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.withTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(timeMillis: Long, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.withTimeout"]},{"name":"suspend fun <T> withTimeout(timeout: Duration, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.withTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(timeout: Duration, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.withTimeout"]},{"name":"suspend fun <T> withTimeoutOrNull(duration: Duration, block: suspend <Error class: unknown class>.() -> T): T?","description":"kotlinx.coroutines.time.withTimeoutOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(duration: Duration, block: suspend <Error class: unknown class>.() -> T): T?","kotlinx.coroutines.time.withTimeoutOrNull"]},{"name":"suspend fun <T> withTimeoutOrNull(timeMillis: Long, block: suspend CoroutineScope.() -> T): T?","description":"kotlinx.coroutines.withTimeoutOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(timeMillis: Long, block: suspend CoroutineScope.() -> T): T?","kotlinx.coroutines.withTimeoutOrNull"]},{"name":"suspend fun <T> withTimeoutOrNull(timeout: Duration, block: suspend CoroutineScope.() -> T): T?","description":"kotlinx.coroutines.withTimeoutOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(timeout: Duration, block: suspend CoroutineScope.() -> T): T?","kotlinx.coroutines.withTimeoutOrNull"]},{"name":"suspend fun Collection<Job>.joinAll()","description":"kotlinx.coroutines.joinAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/join-all.html","searchKeys":["joinAll","suspend fun Collection<Job>.joinAll()","kotlinx.coroutines.joinAll"]},{"name":"suspend fun Flow<*>.collect()","description":"kotlinx.coroutines.flow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html","searchKeys":["collect","suspend fun Flow<*>.collect()","kotlinx.coroutines.flow.collect"]},{"name":"suspend fun Job.cancelAndJoin()","description":"kotlinx.coroutines.cancelAndJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html","searchKeys":["cancelAndJoin","suspend fun Job.cancelAndJoin()","kotlinx.coroutines.cancelAndJoin"]},{"name":"suspend fun ProducerScope<*>.awaitClose(block: () -> Unit = {})","description":"kotlinx.coroutines.channels.awaitClose","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/await-close.html","searchKeys":["awaitClose","suspend fun ProducerScope<*>.awaitClose(block: () -> Unit = {})","kotlinx.coroutines.channels.awaitClose"]},{"name":"suspend fun Window.awaitAnimationFrame(): Double","description":"kotlinx.coroutines.awaitAnimationFrame","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-animation-frame.html","searchKeys":["awaitAnimationFrame","suspend fun Window.awaitAnimationFrame(): Double","kotlinx.coroutines.awaitAnimationFrame"]},{"name":"suspend fun awaitCancellation(): Nothing","description":"kotlinx.coroutines.awaitCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-cancellation.html","searchKeys":["awaitCancellation","suspend fun awaitCancellation(): Nothing","kotlinx.coroutines.awaitCancellation"]},{"name":"suspend fun delay(duration: Duration)","description":"kotlinx.coroutines.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/delay.html","searchKeys":["delay","suspend fun delay(duration: Duration)","kotlinx.coroutines.delay"]},{"name":"suspend fun delay(duration: Duration)","description":"kotlinx.coroutines.time.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines.time/delay.html","searchKeys":["delay","suspend fun delay(duration: Duration)","kotlinx.coroutines.time.delay"]},{"name":"suspend fun delay(timeMillis: Long)","description":"kotlinx.coroutines.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/delay.html","searchKeys":["delay","suspend fun delay(timeMillis: Long)","kotlinx.coroutines.delay"]},{"name":"suspend fun joinAll(vararg jobs: Job)","description":"kotlinx.coroutines.joinAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/join-all.html","searchKeys":["joinAll","suspend fun joinAll(vararg jobs: Job)","kotlinx.coroutines.joinAll"]},{"name":"suspend fun yield()","description":"kotlinx.coroutines.yield","location":"kotlinx-coroutines-core/kotlinx.coroutines/yield.html","searchKeys":["yield","suspend fun yield()","kotlinx.coroutines.yield"]},{"name":"suspend override fun collect(collector: FlowCollector<T>)","description":"kotlinx.coroutines.flow.AbstractFlow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/collect.html","searchKeys":["collect","suspend override fun collect(collector: FlowCollector<T>)","kotlinx.coroutines.flow.AbstractFlow.collect"]},{"name":"val CoroutineContext.isActive: Boolean","description":"kotlinx.coroutines.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-active.html","searchKeys":["isActive","val CoroutineContext.isActive: Boolean","kotlinx.coroutines.isActive"]},{"name":"val CoroutineContext.job: Job","description":"kotlinx.coroutines.job","location":"kotlinx-coroutines-core/kotlinx.coroutines/job.html","searchKeys":["job","val CoroutineContext.job: Job","kotlinx.coroutines.job"]},{"name":"val CoroutineScope.isActive: Boolean","description":"kotlinx.coroutines.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-active.html","searchKeys":["isActive","val CoroutineScope.isActive: Boolean","kotlinx.coroutines.isActive"]},{"name":"val DEFAULT_CONCURRENCY: Int","description":"kotlinx.coroutines.flow.DEFAULT_CONCURRENCY","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-d-e-f-a-u-l-t_-c-o-n-c-u-r-r-e-n-c-y.html","searchKeys":["DEFAULT_CONCURRENCY","val DEFAULT_CONCURRENCY: Int","kotlinx.coroutines.flow.DEFAULT_CONCURRENCY"]},{"name":"val Eagerly: SharingStarted","description":"kotlinx.coroutines.flow.SharingStarted.Companion.Eagerly","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-eagerly.html","searchKeys":["Eagerly","val Eagerly: SharingStarted","kotlinx.coroutines.flow.SharingStarted.Companion.Eagerly"]},{"name":"val IO: CoroutineDispatcher","description":"kotlinx.coroutines.Dispatchers.IO","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html","searchKeys":["IO","val IO: CoroutineDispatcher","kotlinx.coroutines.Dispatchers.IO"]},{"name":"val Lazily: SharingStarted","description":"kotlinx.coroutines.flow.SharingStarted.Companion.Lazily","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-lazily.html","searchKeys":["Lazily","val Lazily: SharingStarted","kotlinx.coroutines.flow.SharingStarted.Companion.Lazily"]},{"name":"val isClosed: Boolean","description":"kotlinx.coroutines.channels.ChannelResult.isClosed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-closed.html","searchKeys":["isClosed","val isClosed: Boolean","kotlinx.coroutines.channels.ChannelResult.isClosed"]},{"name":"val isFailure: Boolean","description":"kotlinx.coroutines.channels.ChannelResult.isFailure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-failure.html","searchKeys":["isFailure","val isFailure: Boolean","kotlinx.coroutines.channels.ChannelResult.isFailure"]},{"name":"val isSuccess: Boolean","description":"kotlinx.coroutines.channels.ChannelResult.isSuccess","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-success.html","searchKeys":["isSuccess","val isSuccess: Boolean","kotlinx.coroutines.channels.ChannelResult.isSuccess"]},{"name":"val name: String","description":"kotlinx.coroutines.CoroutineName.name","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/name.html","searchKeys":["name","val name: String","kotlinx.coroutines.CoroutineName.name"]},{"name":"val value: E","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/value.html","searchKeys":["value","val value: E","kotlinx.coroutines.channels.ConflatedBroadcastChannel.value"]},{"name":"val valueOrNull: E?","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.valueOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/value-or-null.html","searchKeys":["valueOrNull","val valueOrNull: E?","kotlinx.coroutines.channels.ConflatedBroadcastChannel.valueOrNull"]},{"name":"value class ChannelResult<out T>","description":"kotlinx.coroutines.channels.ChannelResult","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/index.html","searchKeys":["ChannelResult","value class ChannelResult<out T>","kotlinx.coroutines.channels.ChannelResult"]},{"name":"fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Publisher<T>","description":"kotlinx.coroutines.reactive.asPublisher","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/as-publisher.html","searchKeys":["asPublisher","fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Publisher<T>","kotlinx.coroutines.reactive.asPublisher"]},{"name":"fun <T : Any> Publisher<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.reactive.asFlow","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/as-flow.html","searchKeys":["asFlow","fun <T : Any> Publisher<T>.asFlow(): Flow<T>","kotlinx.coroutines.reactive.asFlow"]},{"name":"fun <T> publish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","description":"kotlinx.coroutines.reactive.publish","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/publish.html","searchKeys":["publish","fun <T> publish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","kotlinx.coroutines.reactive.publish"]},{"name":"inline suspend fun <T> Publisher<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.reactive.collect","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/collect.html","searchKeys":["collect","inline suspend fun <T> Publisher<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.reactive.collect"]},{"name":"suspend fun <T> Publisher<T>.awaitFirst(): T","description":"kotlinx.coroutines.reactive.awaitFirst","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first.html","searchKeys":["awaitFirst","suspend fun <T> Publisher<T>.awaitFirst(): T","kotlinx.coroutines.reactive.awaitFirst"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.reactive.awaitFirstOrDefault","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> Publisher<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.reactive.awaitFirstOrDefault"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.reactive.awaitFirstOrElse","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.reactive.awaitFirstOrElse"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.reactive.awaitFirstOrNull","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> Publisher<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.reactive.awaitFirstOrNull"]},{"name":"suspend fun <T> Publisher<T>.awaitLast(): T","description":"kotlinx.coroutines.reactive.awaitLast","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-last.html","searchKeys":["awaitLast","suspend fun <T> Publisher<T>.awaitLast(): T","kotlinx.coroutines.reactive.awaitLast"]},{"name":"suspend fun <T> Publisher<T>.awaitSingle(): T","description":"kotlinx.coroutines.reactive.awaitSingle","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Publisher<T>.awaitSingle(): T","kotlinx.coroutines.reactive.awaitSingle"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher"]},{"name":"constructor(scheduler: Scheduler)","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","constructor(scheduler: Scheduler)","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","description":"kotlinx.coroutines.rx2.asSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-single.html","searchKeys":["asSingle","fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","kotlinx.coroutines.rx2.asSingle"]},{"name":"fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","description":"kotlinx.coroutines.rx2.asFlowable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-flowable.html","searchKeys":["asFlowable","fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","kotlinx.coroutines.rx2.asFlowable"]},{"name":"fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","description":"kotlinx.coroutines.rx2.asObservable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-observable.html","searchKeys":["asObservable","fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","kotlinx.coroutines.rx2.asObservable"]},{"name":"fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.rx2.asFlow","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-flow.html","searchKeys":["asFlow","fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","kotlinx.coroutines.rx2.asFlow"]},{"name":"fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","description":"kotlinx.coroutines.rx2.rxFlowable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html","searchKeys":["rxFlowable","fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","kotlinx.coroutines.rx2.rxFlowable"]},{"name":"fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","description":"kotlinx.coroutines.rx2.rxObservable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-observable.html","searchKeys":["rxObservable","fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","kotlinx.coroutines.rx2.rxObservable"]},{"name":"fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","description":"kotlinx.coroutines.rx2.rxSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html","searchKeys":["rxSingle","fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","kotlinx.coroutines.rx2.rxSingle"]},{"name":"fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","description":"kotlinx.coroutines.rx2.asMaybe","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-maybe.html","searchKeys":["asMaybe","fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","kotlinx.coroutines.rx2.asMaybe"]},{"name":"fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","description":"kotlinx.coroutines.rx2.rxMaybe","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-maybe.html","searchKeys":["rxMaybe","fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","kotlinx.coroutines.rx2.rxMaybe"]},{"name":"fun CoroutineDispatcher.asScheduler(): Scheduler","description":"kotlinx.coroutines.rx2.asScheduler","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-scheduler.html","searchKeys":["asScheduler","fun CoroutineDispatcher.asScheduler(): Scheduler","kotlinx.coroutines.rx2.asScheduler"]},{"name":"fun Job.asCompletable(context: CoroutineContext): Completable","description":"kotlinx.coroutines.rx2.asCompletable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-completable.html","searchKeys":["asCompletable","fun Job.asCompletable(context: CoroutineContext): Completable","kotlinx.coroutines.rx2.asCompletable"]},{"name":"fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.rx2.asCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.rx2.asCoroutineDispatcher"]},{"name":"fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","description":"kotlinx.coroutines.rx2.rxCompletable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-completable.html","searchKeys":["rxCompletable","fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","kotlinx.coroutines.rx2.rxCompletable"]},{"name":"inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx2.collect","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/collect.html","searchKeys":["collect","inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx2.collect"]},{"name":"inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx2.collect","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/collect.html","searchKeys":["collect","inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx2.collect"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx2.awaitSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single.html","searchKeys":["awaitSingle","suspend fun <T> MaybeSource<T>.awaitSingle(): T","kotlinx.coroutines.rx2.awaitSingle"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.rx2.awaitSingleOrNull","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.rx2.awaitSingleOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirst(): T","description":"kotlinx.coroutines.rx2.awaitFirst","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first.html","searchKeys":["awaitFirst","suspend fun <T> ObservableSource<T>.awaitFirst(): T","kotlinx.coroutines.rx2.awaitFirst"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.rx2.awaitFirstOrDefault","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.rx2.awaitFirstOrDefault"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.rx2.awaitFirstOrElse","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.rx2.awaitFirstOrElse"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.rx2.awaitFirstOrNull","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.rx2.awaitFirstOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitLast(): T","description":"kotlinx.coroutines.rx2.awaitLast","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-last.html","searchKeys":["awaitLast","suspend fun <T> ObservableSource<T>.awaitLast(): T","kotlinx.coroutines.rx2.awaitLast"]},{"name":"suspend fun <T> ObservableSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx2.awaitSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single.html","searchKeys":["awaitSingle","suspend fun <T> ObservableSource<T>.awaitSingle(): T","kotlinx.coroutines.rx2.awaitSingle"]},{"name":"suspend fun <T> SingleSource<T>.await(): T","description":"kotlinx.coroutines.rx2.await","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await.html","searchKeys":["await","suspend fun <T> SingleSource<T>.await(): T","kotlinx.coroutines.rx2.await"]},{"name":"suspend fun CompletableSource.await()","description":"kotlinx.coroutines.rx2.await","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await.html","searchKeys":["await","suspend fun CompletableSource.await()","kotlinx.coroutines.rx2.await"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduler"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher"]},{"name":"constructor(scheduler: Scheduler)","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","constructor(scheduler: Scheduler)","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","description":"kotlinx.coroutines.rx3.asSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-single.html","searchKeys":["asSingle","fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","kotlinx.coroutines.rx3.asSingle"]},{"name":"fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","description":"kotlinx.coroutines.rx3.asFlowable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-flowable.html","searchKeys":["asFlowable","fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","kotlinx.coroutines.rx3.asFlowable"]},{"name":"fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","description":"kotlinx.coroutines.rx3.asObservable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-observable.html","searchKeys":["asObservable","fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","kotlinx.coroutines.rx3.asObservable"]},{"name":"fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.rx3.asFlow","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-flow.html","searchKeys":["asFlow","fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","kotlinx.coroutines.rx3.asFlow"]},{"name":"fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","description":"kotlinx.coroutines.rx3.rxFlowable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-flowable.html","searchKeys":["rxFlowable","fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","kotlinx.coroutines.rx3.rxFlowable"]},{"name":"fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","description":"kotlinx.coroutines.rx3.rxObservable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-observable.html","searchKeys":["rxObservable","fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","kotlinx.coroutines.rx3.rxObservable"]},{"name":"fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","description":"kotlinx.coroutines.rx3.rxSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-single.html","searchKeys":["rxSingle","fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","kotlinx.coroutines.rx3.rxSingle"]},{"name":"fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T & Any>","description":"kotlinx.coroutines.rx3.asMaybe","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-maybe.html","searchKeys":["asMaybe","fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T & Any>","kotlinx.coroutines.rx3.asMaybe"]},{"name":"fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T & Any>","description":"kotlinx.coroutines.rx3.rxMaybe","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-maybe.html","searchKeys":["rxMaybe","fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T & Any>","kotlinx.coroutines.rx3.rxMaybe"]},{"name":"fun CoroutineDispatcher.asScheduler(): Scheduler","description":"kotlinx.coroutines.rx3.asScheduler","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-scheduler.html","searchKeys":["asScheduler","fun CoroutineDispatcher.asScheduler(): Scheduler","kotlinx.coroutines.rx3.asScheduler"]},{"name":"fun Job.asCompletable(context: CoroutineContext): Completable","description":"kotlinx.coroutines.rx3.asCompletable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-completable.html","searchKeys":["asCompletable","fun Job.asCompletable(context: CoroutineContext): Completable","kotlinx.coroutines.rx3.asCompletable"]},{"name":"fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.rx3.asCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.rx3.asCoroutineDispatcher"]},{"name":"fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","description":"kotlinx.coroutines.rx3.rxCompletable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-completable.html","searchKeys":["rxCompletable","fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","kotlinx.coroutines.rx3.rxCompletable"]},{"name":"inline suspend fun <T> MaybeSource<T & Any>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx3.collect","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/collect.html","searchKeys":["collect","inline suspend fun <T> MaybeSource<T & Any>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx3.collect"]},{"name":"inline suspend fun <T> ObservableSource<T & Any>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx3.collect","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/collect.html","searchKeys":["collect","inline suspend fun <T> ObservableSource<T & Any>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx3.collect"]},{"name":"suspend fun <T> MaybeSource<T & Any>.awaitSingle(): T","description":"kotlinx.coroutines.rx3.awaitSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single.html","searchKeys":["awaitSingle","suspend fun <T> MaybeSource<T & Any>.awaitSingle(): T","kotlinx.coroutines.rx3.awaitSingle"]},{"name":"suspend fun <T> MaybeSource<T & Any>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.rx3.awaitSingleOrNull","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> MaybeSource<T & Any>.awaitSingleOrNull(): T?","kotlinx.coroutines.rx3.awaitSingleOrNull"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitFirst(): T","description":"kotlinx.coroutines.rx3.awaitFirst","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first.html","searchKeys":["awaitFirst","suspend fun <T> ObservableSource<T & Any>.awaitFirst(): T","kotlinx.coroutines.rx3.awaitFirst"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.rx3.awaitFirstOrDefault","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> ObservableSource<T & Any>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.rx3.awaitFirstOrDefault"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.rx3.awaitFirstOrElse","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> ObservableSource<T & Any>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.rx3.awaitFirstOrElse"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.rx3.awaitFirstOrNull","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> ObservableSource<T & Any>.awaitFirstOrNull(): T?","kotlinx.coroutines.rx3.awaitFirstOrNull"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitLast(): T","description":"kotlinx.coroutines.rx3.awaitLast","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-last.html","searchKeys":["awaitLast","suspend fun <T> ObservableSource<T & Any>.awaitLast(): T","kotlinx.coroutines.rx3.awaitLast"]},{"name":"suspend fun <T> ObservableSource<T & Any>.awaitSingle(): T","description":"kotlinx.coroutines.rx3.awaitSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single.html","searchKeys":["awaitSingle","suspend fun <T> ObservableSource<T & Any>.awaitSingle(): T","kotlinx.coroutines.rx3.awaitSingle"]},{"name":"suspend fun <T> SingleSource<T & Any>.await(): T","description":"kotlinx.coroutines.rx3.await","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await.html","searchKeys":["await","suspend fun <T> SingleSource<T & Any>.await(): T","kotlinx.coroutines.rx3.await"]},{"name":"suspend fun CompletableSource.await()","description":"kotlinx.coroutines.rx3.await","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await.html","searchKeys":["await","suspend fun CompletableSource.await()","kotlinx.coroutines.rx3.await"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduler"]}]