<!doctype html>
<html class="no-js">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>buffer</title><meta name="robots" content="noindex, nofollow">
<link href="../../images/logo-icon.svg" rel="icon" type="image/svg"><script>var pathToRoot = "../../";</script>
    <script>document.documentElement.classList.replace("no-js","js");</script>    <script>const storage = localStorage.getItem("dokka-dark-mode")
    if (storage == null) {
        const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        if (osDarkSchemePreferred === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    } else {
        const savedDarkMode = JSON.parse(storage)
        if(savedDarkMode === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    }
    </script>
<script type="text/javascript" src="../../scripts/sourceset_dependencies.js" async></script>
<link href="../../styles/style.css" rel="Stylesheet">
<link href="../../styles/main.css" rel="Stylesheet">
<link href="../../styles/prism.css" rel="Stylesheet">
<link href="../../styles/logo-styles.css" rel="Stylesheet">
<script type="text/javascript" src="../../scripts/clipboard.js" async></script>
<script type="text/javascript" src="../../scripts/navigation-loader.js" async></script>
<script type="text/javascript" src="../../scripts/platform-content-handler.js" async></script>
<script type="text/javascript" src="../../scripts/main.js" defer></script>
<script type="text/javascript" src="../../scripts/prism.js" async></script>
<script type="text/javascript" src="../../scripts/symbol-parameters-wrapper_deferred.js" defer></script></head>
<body>
    <div class="root">
<nav class="navigation" id="navigation-wrapper">
    <div class="navigation--inner">
        <div class="navigation-title">
            <button class="menu-toggle" id="menu-toggle" type="button">toggle menu</button>
            <div class="library-name">
<a class="library-name--link" href="../../index.html">
                            kotlinx.coroutines
                    </a>            </div>
            <div class="library-version">1.7.1-SNAPSHOT
            </div>
        </div>
        <div class="filter-section" id="filter-section">
                <button class="platform-tag platform-selector common-like" data-active="" data-filter=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain">common</button>
        </div>
    </div>
    <div class="navigation-controls">
        <button class="navigation-controls--btn navigation-controls--theme" id="theme-toggle-button" type="button">switch theme</button>
        <div class="navigation-controls--btn navigation-controls--search" id="searchBar" role="button">search in API</div>
    </div>
</nav>
        <div id="container">
            <div class="sidebar" id="leftColumn">
                <div class="sidebar--inner" id="sideMenu"></div>
            </div>
            <div id="main">
<div class="main-content" data-page-type="member" id="content" pageids="kotlinx-coroutines-core::kotlinx.coroutines.flow//buffer/kotlinx.coroutines.flow.Flow[TypeParam(bounds=[kotlin.Any?])]#kotlin.Int#kotlinx.coroutines.channels.BufferOverflow/PointingToDeclaration//1975948010">
  <div class="breadcrumbs"><a href="../index.html">kotlinx-coroutines-core</a><span class="delimiter">/</span><a href="index.html">kotlinx.coroutines.flow</a><span class="delimiter">/</span><span class="current">buffer</span></div>
  <div class="cover ">
    <h1 class="cover"><span><span>buffer</span></span></h1>
  </div>
  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain"><div class="symbol monospace"><span class="token keyword"></span><span class="token keyword">fun </span><span class="token operator">&lt;</span><span class="token keyword"></span><a href="buffer.html">T</a><span class="token operator">&gt; </span><a href="-flow/index.html">Flow</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="buffer.html">T</a><span class="token operator">&gt;</span><span class="token punctuation">.</span><a href="buffer.html"><span class="token function">buffer</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">capacity<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/index.html">Int</a><span class="token operator"> = </span>BUFFERED<span class="token punctuation">, </span></span><span class="parameter ">onBufferOverflow<span class="token operator">: </span><a href="../kotlinx.coroutines.channels/-buffer-overflow/index.html">BufferOverflow</a><span class="token operator"> = </span>BufferOverflow.SUSPEND</span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="-flow/index.html">Flow</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="buffer.html">T</a><span class="token operator">&gt;</span><span class="clearfix"><span class="floating-right">(<a href="https://github.com/kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-core/common/src/flow/operators/Context.kt#L125">source</a>)</span></span></div><p class="paragraph">Buffers flow emissions via channel of a specified capacity and runs collector in a separate coroutine.</p><p class="paragraph">Normally, <a href="-flow/index.html">flows</a> are <i>sequential</i>. It means that the code of all operators is executed in the same coroutine. For example, consider the following code using <a href="on-each.html">onEach</a> and <a href="collect.html">collect</a> operators:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">flowOf("A", "B", "C")<br>    .onEach  { println("1$it") }<br>    .collect { println("2$it") }</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">It is going to be executed in the following order by the coroutine <code class="lang-kotlin">Q</code> that calls this code:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">Q : --&gt;-- [1A] -- [2A] -- [1B] -- [2B] -- [1C] -- [2C] --&gt;--</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">So if the operator's code takes considerable time to execute, then the total execution time is going to be the sum of execution times for all operators.</p><p class="paragraph">The <code class="lang-kotlin">buffer</code> operator creates a separate coroutine during execution for the flow it applies to. Consider the following code:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">flowOf("A", "B", "C")<br>    .onEach  { println("1$it") }<br>    .buffer()  // &lt;--------------- buffer between onEach and collect<br>    .collect { println("2$it") }</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">It will use two coroutines for execution of the code. A coroutine <code class="lang-kotlin">Q</code> that calls this code is going to execute <code class="lang-kotlin">collect</code>, and the code before <code class="lang-kotlin">buffer</code> will be executed in a separate new coroutine <code class="lang-kotlin">P</code> concurrently with <code class="lang-kotlin">Q</code>:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">P : --&gt;-- [1A] -- [1B] -- [1C] ----------&gt;--  // flowOf(...).onEach { ... }<br><br>                      |<br>                      | channel               // buffer()<br>                      V<br><br>Q : --&gt;---------- [2A] -- [2B] -- [2C] --&gt;--  // collect</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">When the operator's code takes some time to execute, this decreases the total execution time of the flow. A <a href="../kotlinx.coroutines.channels/-channel/index.html">channel</a> is used between the coroutines to send elements emitted by the coroutine <code class="lang-kotlin">P</code> to the coroutine <code class="lang-kotlin">Q</code>. If the code before <code class="lang-kotlin">buffer</code> operator (in the coroutine <code class="lang-kotlin">P</code>) is faster than the code after <code class="lang-kotlin">buffer</code> operator (in the coroutine <code class="lang-kotlin">Q</code>), then this channel will become full at some point and will suspend the producer coroutine <code class="lang-kotlin">P</code> until the consumer coroutine <code class="lang-kotlin">Q</code> catches up. The <a href="buffer.html">capacity</a> parameter defines the size of this buffer.</p><h3 class=""> Buffer overflow</h3><p class="paragraph">By default, the emitter is suspended when the buffer overflows, to let collector catch up. This strategy can be overridden with an optional <a href="buffer.html">onBufferOverflow</a> parameter so that the emitter is never suspended. In this case, on buffer overflow either the oldest value in the buffer is dropped with the <a href="../kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-o-l-d-e-s-t/index.html">DROP_OLDEST</a> strategy and the latest emitted value is added to the buffer, or the latest value that is being emitted is dropped with the <a href="../kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-l-a-t-e-s-t/index.html">DROP_LATEST</a> strategy, keeping the buffer intact. To implement either of the custom strategies, a buffer of at least one element is used.</p><h3 class=""> Operator fusion</h3><p class="paragraph">Adjacent applications of <a href="channel-flow.html">channelFlow</a>, <a href="flow-on.html">flowOn</a>, <a href="buffer.html">buffer</a>, and <a href="produce-in.html">produceIn</a> are always fused so that only one properly configured channel is used for execution.</p><p class="paragraph">Explicitly specified buffer capacity takes precedence over <code class="lang-kotlin">buffer()</code> or <code class="lang-kotlin">buffer(Channel.BUFFERED)</code> calls, which effectively requests a buffer of any size. Multiple requests with a specified buffer size produce a buffer with the sum of the requested buffer sizes.</p><p class="paragraph">A <code class="lang-kotlin">buffer</code> call with a non-default value of the <a href="buffer.html">onBufferOverflow</a> parameter overrides all immediately preceding buffering operators, because it never suspends its upstream, and thus no upstream buffer would ever be used.</p><h3 class=""> Conceptual implementation</h3><p class="paragraph">The actual implementation of <code class="lang-kotlin">buffer</code> is not trivial due to the fusing, but conceptually its basic implementation is equivalent to the following code that can be written using <a href="../kotlinx.coroutines.channels/produce.html">produce</a> coroutine builder to produce a channel and <a href="../kotlinx.coroutines.channels/consume-each.html">consumeEach</a> extension to consume it:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">fun &lt;T&gt; Flow&lt;T&gt;.buffer(capacity: Int = DEFAULT): Flow&lt;T&gt; = flow {<br>    coroutineScope { // limit the scope of concurrent producer coroutine<br>        val channel = produce(capacity = capacity) {<br>            collect { send(it) } // send all to channel<br>        }<br>        // emit all received values<br>        channel.consumeEach { emit(it) }<br>    }<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><h3 class=""> Conflation</h3><p class="paragraph">Usage of this function with <a href="buffer.html">capacity</a> of <a href="../kotlinx.coroutines.channels/-channel/-factory/-c-o-n-f-l-a-t-e-d.html">Channel.CONFLATED</a> is a shortcut to <code class="lang-kotlin">buffer(onBufferOverflow = </code><a href="../kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-o-l-d-e-s-t/index.html"><code class="lang-kotlin">BufferOverflow.DROP_OLDEST</code></a><code class="lang-kotlin">)</code>, and is available via a separate <a href="conflate.html">conflate</a> operator. See its documentation for details.</p><h4 class="">Parameters</h4><div class="table"><div class="table-row" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span><span>capacity</span></span></u></div></span></div><div><div class="title"><p class="paragraph">type/capacity of the buffer between coroutines. Allowed values are the same as in <code class="lang-kotlin">Channel(...)</code> factory function: <a href="../kotlinx.coroutines.channels/-channel/-factory/-b-u-f-f-e-r-e-d.html">BUFFERED</a> (by default), <a href="../kotlinx.coroutines.channels/-channel/-factory/-c-o-n-f-l-a-t-e-d.html">CONFLATED</a>, <a href="../kotlinx.coroutines.channels/-channel/-factory/-r-e-n-d-e-z-v-o-u-s.html">RENDEZVOUS</a>, <a href="../kotlinx.coroutines.channels/-channel/-factory/-u-n-l-i-m-i-t-e-d.html">UNLIMITED</a> or a non-negative value indicating an explicitly requested size.</p></div></div></div></div><div class="table-row" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><u><span>on</span><wbr><span>Buffer</span><wbr><span><span>Overflow</span></span></u></div></span></div><div><div class="title"><p class="paragraph">configures an action on buffer overflow (optional, defaults to <a href="../kotlinx.coroutines.channels/-buffer-overflow/-s-u-s-p-e-n-d/index.html">SUSPEND</a>, supported only when <code class="lang-kotlin">capacity &gt;= 0</code> or <code class="lang-kotlin">capacity == Channel.BUFFERED</code>, implicitly creates a channel with at least one buffered element).</p></div></div></div></div></div></div></div>
</div>
      <div class="footer">
        <span class="go-to-top-icon"><a href="#content" id="go-to-top-link"></a></span><span>© 2023 Copyright</span><span class="pull-right"><span>Generated by </span><a href="https://github.com/Kotlin/dokka"><span>dokka</span><span class="padded-icon"></span></a></span>
      </div>
            </div>
        </div>
    </div>
</body>
</html>

