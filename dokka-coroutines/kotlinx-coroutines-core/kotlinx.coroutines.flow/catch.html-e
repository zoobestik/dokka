<!doctype html>
<html class="no-js">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>catch</title><meta name="robots" content="noindex, nofollow">
<link href="../../images/logo-icon.svg" rel="icon" type="image/svg"><script>var pathToRoot = "../../";</script>
    <script>document.documentElement.classList.replace("no-js","js");</script>    <script>const storage = localStorage.getItem("dokka-dark-mode")
    if (storage == null) {
        const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        if (osDarkSchemePreferred === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    } else {
        const savedDarkMode = JSON.parse(storage)
        if(savedDarkMode === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    }
    </script>
<script type="text/javascript" src="../../scripts/sourceset_dependencies.js" async></script>
<link href="../../styles/style.css" rel="Stylesheet">
<link href="../../styles/main.css" rel="Stylesheet">
<link href="../../styles/prism.css" rel="Stylesheet">
<link href="../../styles/logo-styles.css" rel="Stylesheet">
<script type="text/javascript" src="../../scripts/clipboard.js" async></script>
<script type="text/javascript" src="../../scripts/navigation-loader.js" async></script>
<script type="text/javascript" src="../../scripts/platform-content-handler.js" async></script>
<script type="text/javascript" src="../../scripts/main.js" defer></script>
<script type="text/javascript" src="../../scripts/prism.js" async></script>
<script type="text/javascript" src="../../scripts/symbol-parameters-wrapper_deferred.js" defer></script></head>
<body>
    <div class="root">
<nav class="navigation" id="navigation-wrapper">
    <div class="navigation--inner">
        <div class="navigation-title">
            <button class="menu-toggle" id="menu-toggle" type="button">toggle menu</button>
            <div class="library-name">
<a class="library-name--link" href="../../index.html">
                            kotlinx.coroutines
                    </a>            </div>
            <div class="library-version">1.7.1-SNAPSHOT
            </div>
        </div>
        <div class="filter-section" id="filter-section">
                <button class="platform-tag platform-selector common-like" data-active="" data-filter=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain">common</button>
        </div>
    </div>
    <div class="navigation-controls">
        <button class="navigation-controls--btn navigation-controls--theme" id="theme-toggle-button" type="button">switch theme</button>
        <div class="navigation-controls--btn navigation-controls--search" id="searchBar" role="button">search in API</div>
    </div>
</nav>
        <div id="container">
            <div class="sidebar" id="leftColumn">
                <div class="sidebar--inner" id="sideMenu"></div>
            </div>
            <div id="main">
<div class="main-content" data-page-type="member" id="content" pageids="kotlinx-coroutines-core::kotlinx.coroutines.flow//catch/kotlinx.coroutines.flow.Flow[TypeParam(bounds=[kotlin.Any?])]#kotlin.coroutines.SuspendFunction2[kotlinx.coroutines.flow.FlowCollector[TypeParam(bounds=[kotlin.Any?])],kotlin.Throwable,kotlin.Unit]/PointingToDeclaration//1975948010">
  <div class="breadcrumbs"><a href="../index.html">kotlinx-coroutines-core</a><span class="delimiter">/</span><a href="index.html">kotlinx.coroutines.flow</a><span class="delimiter">/</span><span class="current">catch</span></div>
  <div class="cover ">
    <h1 class="cover"><span><span>catch</span></span></h1>
  </div>
  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain"><div class="symbol monospace"><span class="token keyword"></span><span class="token keyword">fun </span><span class="token operator">&lt;</span><span class="token keyword"></span><a href="catch.html">T</a><span class="token operator">&gt; </span><a href="-flow/index.html">Flow</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="catch.html">T</a><span class="token operator">&gt;</span><span class="token punctuation">.</span><a href="catch.html"><span class="token function">catch</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">action<span class="token operator">: </span><span class="token keyword">suspend </span><span class="token keyword"></span><a href="-flow-collector/index.html">FlowCollector</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="catch.html">T</a><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword"></span>cause<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/index.html">Throwable</a><span class="token punctuation">)</span><span class="token operator"> -&gt; </span><span class="token keyword"></span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html">Unit</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="-flow/index.html">Flow</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="catch.html">T</a><span class="token operator">&gt;</span><span class="clearfix"><span class="floating-right">(<a href="https://github.com/kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-core/common/src/flow/operators/Errors.kt#L57">source</a>)</span></span></div><p class="paragraph">Catches exceptions in the flow completion and calls a specified <a href="catch.html">action</a> with the caught exception. This operator is <i>transparent</i> to exceptions that occur in downstream flow and does not catch exceptions that are thrown to cancel the flow.</p><p class="paragraph">For example:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">flow { emitData() }<br>    .map { computeOne(it) }<br>    .catch { ... } // catches exceptions in emitData and computeOne<br>    .map { computeTwo(it) }<br>    .collect { process(it) } // throws exceptions from process and computeTwo</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Conceptually, the action of <code class="lang-kotlin">catch</code> operator is similar to wrapping the code of upstream flows with <code class="lang-kotlin">try { ... } catch (e: Throwable) { action(e) }</code>.</p><p class="paragraph">Any exception in the <a href="catch.html">action</a> code itself proceeds downstream where it can be caught by further <code class="lang-kotlin">catch</code> operators if needed. If a particular exception does not need to be caught it can be rethrown from the action of <code class="lang-kotlin">catch</code> operator. For example:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">flow.catch { e -&gt;<br>    if (e !is IOException) throw e // rethrow all but IOException<br>    // e is IOException here<br>    ...<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">The <a href="catch.html">action</a> code has <a href="-flow-collector/index.html">FlowCollector</a> as a receiver and can <a href="-flow-collector/emit.html">emit</a> values downstream. For example, caught exception can be replaced with some wrapper value for errors:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">flow.catch { e -&gt; emit(ErrorWrapperValue(e)) }</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">The <a href="catch.html">action</a> can also use <a href="emit-all.html">emitAll</a> to fallback on some other flow in case of an error. However, to retry an original flow use <a href="retry-when.html">retryWhen</a> operator that can retry the flow multiple times without introducing ever-growing stack of suspending calls.</p></div></div>
</div>
      <div class="footer">
        <span class="go-to-top-icon"><a href="#content" id="go-to-top-link"></a></span><span>Â© 2023 Copyright</span><span class="pull-right"><span>Generated by </span><a href="https://github.com/Kotlin/dokka"><span>dokka</span><span class="padded-icon"></span></a></span>
      </div>
            </div>
        </div>
    </div>
</body>
</html>

