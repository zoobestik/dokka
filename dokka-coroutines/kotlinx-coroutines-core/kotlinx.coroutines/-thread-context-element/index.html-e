<!doctype html>
<html class="no-js">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>ThreadContextElement</title><meta name="robots" content="noindex, nofollow">
<link href="../../../images/logo-icon.svg" rel="icon" type="image/svg"><script>var pathToRoot = "../../../";</script>
    <script>document.documentElement.classList.replace("no-js","js");</script>    <script>const storage = localStorage.getItem("dokka-dark-mode")
    if (storage == null) {
        const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        if (osDarkSchemePreferred === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    } else {
        const savedDarkMode = JSON.parse(storage)
        if(savedDarkMode === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    }
    </script>
<script type="text/javascript" src="../../../scripts/sourceset_dependencies.js" async></script>
<link href="../../../styles/style.css" rel="Stylesheet">
<link href="../../../styles/main.css" rel="Stylesheet">
<link href="../../../styles/prism.css" rel="Stylesheet">
<link href="../../../styles/logo-styles.css" rel="Stylesheet">
<script type="text/javascript" src="../../../scripts/clipboard.js" async></script>
<script type="text/javascript" src="../../../scripts/navigation-loader.js" async></script>
<script type="text/javascript" src="../../../scripts/platform-content-handler.js" async></script>
<script type="text/javascript" src="../../../scripts/main.js" defer></script>
<script type="text/javascript" src="../../../scripts/prism.js" async></script>
<script type="text/javascript" src="../../../scripts/symbol-parameters-wrapper_deferred.js" defer></script></head>
<body>
    <div class="root">
<nav class="navigation" id="navigation-wrapper">
    <div class="navigation--inner">
        <div class="navigation-title">
            <button class="menu-toggle" id="menu-toggle" type="button">toggle menu</button>
            <div class="library-name">
<a class="library-name--link" href="../../../index.html">
                            kotlinx.coroutines
                    </a>            </div>
            <div class="library-version">1.7.1-SNAPSHOT
            </div>
        </div>
        <div class="filter-section" id="filter-section">
                <button class="platform-tag platform-selector jvm-like" data-active="" data-filter=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">jvm</button>
        </div>
    </div>
    <div class="navigation-controls">
        <button class="navigation-controls--btn navigation-controls--theme" id="theme-toggle-button" type="button">switch theme</button>
        <div class="navigation-controls--btn navigation-controls--search" id="searchBar" role="button">search in API</div>
    </div>
</nav>
        <div id="container">
            <div class="sidebar" id="leftColumn">
                <div class="sidebar--inner" id="sideMenu"></div>
            </div>
            <div id="main">
<div class="main-content" data-page-type="classlike" id="content" pageids="kotlinx-coroutines-core::kotlinx.coroutines/ThreadContextElement///PointingToDeclaration//-1316292404">
  <div class="breadcrumbs"><a href="../../index.html">kotlinx-coroutines-core</a><span class="delimiter">/</span><a href="../index.html">kotlinx.coroutines</a><span class="delimiter">/</span><span class="current">ThreadContextElement</span></div>
  <div class="cover ">
    <h1 class="cover"><span>Thread</span><wbr><span>Context</span><wbr><span><span>Element</span></span></h1>
    <div class="platform-hinted  with-platform-tabs" data-platform-hinted="data-platform-hinted">
      <div class="platform-bookmarks-row" data-toggle-list="data-toggle-list"><button class="platform-bookmark" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-active="" data-toggle=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">jvm</button></div>
<div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"><div class="symbol monospace"><span class="token keyword">interface </span><a href="index.html">ThreadContextElement</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="index.html">S</a><span class="token operator">&gt;</span> : <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/-element/index.html">CoroutineContext.Element</a><span class="clearfix"><span class="floating-right">(<a href="https://github.com/kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-core/jvm/src/ThreadContextElement.kt#L61">source</a>)</span></span></div><p class="paragraph">Defines elements in <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index.html">CoroutineContext</a> that are installed into thread context every time the coroutine with this element in the context is resumed on a thread.</p><p class="paragraph">Implementations of this interface define a type <a href="index.html">S</a> of the thread-local state that they need to store on resume of a coroutine and restore later on suspend. The infrastructure provides the corresponding storage.</p><p class="paragraph">Example usage looks like this:</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">// Appends "name" of a coroutine to a current thread name when coroutine is executed<br>class CoroutineName(val name: String) : ThreadContextElement&lt;String&gt; {<br>    // declare companion object for a key of this element in coroutine context<br>    companion object Key : CoroutineContext.Key&lt;CoroutineName&gt;<br><br>    // provide the key of the corresponding context element<br>    override val key: CoroutineContext.Key&lt;CoroutineName&gt;<br>        get() = Key<br><br>    // this is invoked before coroutine is resumed on current thread<br>    override fun updateThreadContext(context: CoroutineContext): String {<br>        val previousName = Thread.currentThread().name<br>        Thread.currentThread().name = "$previousName # $name"<br>        return previousName<br>    }<br><br>    // this is invoked after coroutine has suspended on current thread<br>    override fun restoreThreadContext(context: CoroutineContext, oldState: String) {<br>        Thread.currentThread().name = oldState<br>    }<br>}<br><br>// Usage<br>launch(Dispatchers.Main + CoroutineName("Progress bar coroutine")) { ... }</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><p class="paragraph">Every time this coroutine is resumed on a thread, UI thread name is updated to "UI thread original name # Progress bar coroutine" and the thread name is restored to the original one when this coroutine suspends.</p><p class="paragraph">To use <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html">ThreadLocal</a> variable within the coroutine use <a href="../as-context-element.html">ThreadLocal.asContextElement</a> function.</p><h3 class=""> Reentrancy and thread-safety</h3><p class="paragraph">Correct implementations of this interface must expect that calls to <a href="restore-thread-context.html">restoreThreadContext</a> may happen in parallel to the subsequent <a href="update-thread-context.html">updateThreadContext</a> and <a href="restore-thread-context.html">restoreThreadContext</a> operations. See <a href="../-copyable-thread-context-element/index.html">CopyableThreadContextElement</a> for advanced interleaving details.</p><p class="paragraph">All implementations of <a href="index.html">ThreadContextElement</a> should be thread-safe and guard their internal mutable state within an element accordingly.</p><h4 class="">Inheritors</h4><div class="table"><div class="table-row" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"><div class="main-subrow keyValue "><div class=""><span class="inline-flex"><div><a href="../-copyable-thread-context-element/index.html">CopyableThreadContextElement</a></div></span></div><div></div></div></div></div></div>    </div>
  </div>
  <div class="tabbedcontent">
    <div class="tabs-section" tabs-section="tabs-section"><button class="section-tab" data-active="" data-togglable="CONSTRUCTOR,TYPE,PROPERTY,FUNCTION">Members</button></div>
    <div class="tabs-section-body">
      <div data-togglable="FUNCTION">
        <h2 class="">Functions</h2>
        <div class="table"><a data-name="100377933%2FFunctions%2F-1316292404" anchor-label="restoreThreadContext" id="100377933%2FFunctions%2F-1316292404" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"></a>
          <div class="table-row" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">
            <div class="main-subrow keyValue ">
              <div class=""><span class="inline-flex">
                  <div><a href="restore-thread-context.html"><span>restore</span><wbr><span>Thread</span><wbr><span><span>Context</span></span></a></div>
<span class="anchor-wrapper"><span class="anchor-icon" pointing-to="100377933%2FFunctions%2F-1316292404"></span>
                    <div class="copy-popup-wrapper "><span class="copy-popup-icon"></span><span>Link copied to clipboard</span></div>
                  </span></span></div>
              <div>
                <div class="title">
                  <div class="platform-hinted  with-platform-tabs" data-platform-hinted="data-platform-hinted">
                    <div class="platform-bookmarks-row" data-toggle-list="data-toggle-list"><button class="platform-bookmark" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-active="" data-toggle=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">jvm</button></div>
<div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"><div class="symbol monospace"><span class="token keyword">abstract </span><span class="token keyword"></span><span class="token keyword">fun </span><a href="restore-thread-context.html"><span class="token function">restoreThreadContext</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">context<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index.html">CoroutineContext</a><span class="token punctuation">, </span></span><span class="parameter ">oldState<span class="token operator">: </span><a href="index.html">S</a></span></span><span class="token punctuation">)</span></div><div class="brief "><p class="paragraph">Restores context of the current thread. This function is invoked after the coroutine in the specified <a href="restore-thread-context.html">context</a> is suspended in the current thread if <a href="update-thread-context.html">updateThreadContext</a> was previously invoked on resume of this coroutine. The value of <a href="restore-thread-context.html">oldState</a> is the result of the previous invocation of <a href="update-thread-context.html">updateThreadContext</a> and it should be restored in the thread-local state by this function. This method should handle its own exceptions and do not rethrow it. Thrown exceptions will leave coroutine which context is updated in an undefined state and may crash an application.</p></div></div>                  </div>
                </div>
              </div>
            </div>
          </div>
<a data-name="-841644801%2FFunctions%2F-1316292404" anchor-label="updateThreadContext" id="-841644801%2FFunctions%2F-1316292404" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"></a>
          <div class="table-row" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">
            <div class="main-subrow keyValue ">
              <div class=""><span class="inline-flex">
                  <div><a href="update-thread-context.html"><span>update</span><wbr><span>Thread</span><wbr><span><span>Context</span></span></a></div>
<span class="anchor-wrapper"><span class="anchor-icon" pointing-to="-841644801%2FFunctions%2F-1316292404"></span>
                    <div class="copy-popup-wrapper "><span class="copy-popup-icon"></span><span>Link copied to clipboard</span></div>
                  </span></span></div>
              <div>
                <div class="title">
                  <div class="platform-hinted  with-platform-tabs" data-platform-hinted="data-platform-hinted">
                    <div class="platform-bookmarks-row" data-toggle-list="data-toggle-list"><button class="platform-bookmark" data-filterable-current=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-filterable-set=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain" data-active="" data-toggle=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain">jvm</button></div>
<div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/jvmMain"><div class="symbol monospace"><span class="token keyword">abstract </span><span class="token keyword"></span><span class="token keyword">fun </span><a href="update-thread-context.html"><span class="token function">updateThreadContext</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter ">context<span class="token operator">: </span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/index.html">CoroutineContext</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="index.html">S</a></div><div class="brief "><p class="paragraph">Updates context of the current thread. This function is invoked before the coroutine in the specified <a href="update-thread-context.html">context</a> is resumed in the current thread when the context of the coroutine this element. The result of this function is the old value of the thread-local state that will be passed to <a href="restore-thread-context.html">restoreThreadContext</a>. This method should handle its own exceptions and do not rethrow it. Thrown exceptions will leave coroutine which context is updated in an undefined state and may crash an application.</p></div></div>                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
      <div class="footer">
        <span class="go-to-top-icon"><a href="#content" id="go-to-top-link"></a></span><span>© 2023 Copyright</span><span class="pull-right"><span>Generated by </span><a href="https://github.com/Kotlin/dokka"><span>dokka</span><span class="padded-icon"></span></a></span>
      </div>
            </div>
        </div>
    </div>
</body>
</html>

