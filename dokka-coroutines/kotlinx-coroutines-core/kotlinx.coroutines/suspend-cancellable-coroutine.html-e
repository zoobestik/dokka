<!doctype html>
<html class="no-js">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>suspendCancellableCoroutine</title><meta name="robots" content="noindex, nofollow">
<link href="../../images/logo-icon.svg" rel="icon" type="image/svg"><script>var pathToRoot = "../../";</script>
    <script>document.documentElement.classList.replace("no-js","js");</script>    <script>const storage = localStorage.getItem("dokka-dark-mode")
    if (storage == null) {
        const osDarkSchemePreferred = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches
        if (osDarkSchemePreferred === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    } else {
        const savedDarkMode = JSON.parse(storage)
        if(savedDarkMode === true) {
            document.getElementsByTagName("html")[0].classList.add("theme-dark")
        }
    }
    </script>
<script type="text/javascript" src="../../scripts/sourceset_dependencies.js" async></script>
<link href="../../styles/style.css" rel="Stylesheet">
<link href="../../styles/main.css" rel="Stylesheet">
<link href="../../styles/prism.css" rel="Stylesheet">
<link href="../../styles/logo-styles.css" rel="Stylesheet">
<script type="text/javascript" src="../../scripts/clipboard.js" async></script>
<script type="text/javascript" src="../../scripts/navigation-loader.js" async></script>
<script type="text/javascript" src="../../scripts/platform-content-handler.js" async></script>
<script type="text/javascript" src="../../scripts/main.js" defer></script>
<script type="text/javascript" src="../../scripts/prism.js" async></script>
<script type="text/javascript" src="../../scripts/symbol-parameters-wrapper_deferred.js" defer></script></head>
<body>
    <div class="root">
<nav class="navigation" id="navigation-wrapper">
    <div class="navigation--inner">
        <div class="navigation-title">
            <button class="menu-toggle" id="menu-toggle" type="button">toggle menu</button>
            <div class="library-name">
<a class="library-name--link" href="../../index.html">
                            kotlinx.coroutines
                    </a>            </div>
            <div class="library-version">1.7.1-SNAPSHOT
            </div>
        </div>
        <div class="filter-section" id="filter-section">
                <button class="platform-tag platform-selector common-like" data-active="" data-filter=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain">common</button>
        </div>
    </div>
    <div class="navigation-controls">
        <button class="navigation-controls--btn navigation-controls--theme" id="theme-toggle-button" type="button">switch theme</button>
        <div class="navigation-controls--btn navigation-controls--search" id="searchBar" role="button">search in API</div>
    </div>
</nav>
        <div id="container">
            <div class="sidebar" id="leftColumn">
                <div class="sidebar--inner" id="sideMenu"></div>
            </div>
            <div id="main">
<div class="main-content" data-page-type="member" id="content" pageids="kotlinx-coroutines-core::kotlinx.coroutines//suspendCancellableCoroutine/#kotlin.Function1[kotlinx.coroutines.CancellableContinuation[TypeParam(bounds=[kotlin.Any?])],kotlin.Unit]/PointingToDeclaration//1975948010">
  <div class="breadcrumbs"><a href="../index.html">kotlinx-coroutines-core</a><span class="delimiter">/</span><a href="index.html">kotlinx.coroutines</a><span class="delimiter">/</span><span class="current">suspendCancellableCoroutine</span></div>
  <div class="cover ">
    <h1 class="cover"><span>suspend</span><wbr><span>Cancellable</span><wbr><span><span>Coroutine</span></span></h1>
  </div>
  <div class="platform-hinted " data-platform-hinted="data-platform-hinted"><div class="content sourceset-dependent-content" data-active="" data-togglable=":kotlinx-coroutines-core:dokkaHtmlPartial/commonMain"><div class="symbol monospace"><span class="token keyword">inline suspend </span><span class="token keyword">fun </span><span class="token operator">&lt;</span><span class="token keyword"></span><a href="suspend-cancellable-coroutine.html">T</a><span class="token operator">&gt; </span><a href="suspend-cancellable-coroutine.html"><span class="token function">suspendCancellableCoroutine</span></a><span class="token punctuation">(</span><span class="parameters "><span class="parameter "><span class="token keyword">crossinline </span>block<span class="token operator">: </span><span class="token punctuation">(</span><span class="token keyword"></span><a href="-cancellable-continuation/index.html">CancellableContinuation</a><span class="token operator">&lt;</span><span class="token keyword"></span><a href="suspend-cancellable-coroutine.html">T</a><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator"> -&gt; </span><span class="token keyword"></span><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/index.html">Unit</a></span></span><span class="token punctuation">)</span><span class="token operator">: </span><a href="suspend-cancellable-coroutine.html">T</a><span class="clearfix"><span class="floating-right">(<a href="https://github.com/kotlin/kotlinx.coroutines/tree/master/kotlinx-coroutines-core/common/src/CancellableContinuation.kt#L311">source</a>)</span></span></div><p class="paragraph">Suspends the coroutine like <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/index.html">suspendCoroutine</a>, but providing a <a href="-cancellable-continuation/index.html">CancellableContinuation</a> to the <a href="suspend-cancellable-coroutine.html">block</a>. This function throws a <a href="-cancellation-exception/index.html">CancellationException</a> if the <a href="-job/index.html">Job</a> of the coroutine is cancelled or completed while it is suspended.</p><p class="paragraph">A typical use of this function is to suspend a coroutine while waiting for a result from a single-shot callback API and to return the result to the caller. For multi-shot callback APIs see <a href="../kotlinx.coroutines.flow/callback-flow.html">callbackFlow</a>.</p><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">suspend fun awaitCallback(): T = suspendCancellableCoroutine { continuation -&gt;<br>    val callback = object : Callback { // Implementation of some callback interface<br>        override fun onCompleted(value: T) {<br>            // Resume coroutine with a value provided by the callback<br>            continuation.resume(value)<br>        }<br>        override fun onApiError(cause: Throwable) {<br>            // Resume coroutine with an exception provided by the callback<br>            continuation.resumeWithException(cause)<br>        }<br>    }<br>    // Register callback with an API<br>    api.register(callback)<br>    // Remove callback on cancellation<br>    continuation.invokeOnCancellation { api.unregister(callback) }<br>    // At this point the coroutine is suspended by suspendCancellableCoroutine until callback fires<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><blockquote class="quotation"><p class="paragraph">The callback <code class="lang-kotlin">register</code>/<code class="lang-kotlin">unregister</code> methods provided by an external API must be thread-safe, because <code class="lang-kotlin">invokeOnCancellation</code> block can be called at any time due to asynchronous nature of cancellation, even concurrently with the call of the callback.</p></blockquote><h3 class=""> Prompt cancellation guarantee</h3><p class="paragraph">This function provides <strong>prompt cancellation guarantee</strong>. If the <a href="-job/index.html">Job</a> of the current coroutine was cancelled while this function was suspended it will not resume successfully.</p><p class="paragraph">The cancellation of the coroutine's job is generally asynchronous with respect to the suspended coroutine. The suspended coroutine is resumed with the call it to its <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation/resume-with.html">Continuation.resumeWith</a> member function or to <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/index.html">resume</a> extension function. However, when coroutine is resumed, it does not immediately start executing, but is passed to its <a href="-coroutine-dispatcher/index.html">CoroutineDispatcher</a> to schedule its execution when dispatcher's resources become available for execution. The job's cancellation can happen both before, after, and concurrently with the call to <code class="lang-kotlin">resume</code>. In any case, prompt cancellation guarantees that the the coroutine will not resume its code successfully.</p><p class="paragraph">If the coroutine was resumed with an exception (for example, using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/index.html">Continuation.resumeWithException</a> extension function) and cancelled, then the resulting exception of the <code class="lang-kotlin">suspendCancellableCoroutine</code> function is determined by whichever action (exceptional resume or cancellation) that happened first.</p><h3 class=""> Returning resources from a suspended coroutine</h3><p class="paragraph">As a result of a prompt cancellation guarantee, when a closeable resource (like open file or a handle to another native resource) is returned from a suspended coroutine as a value it can be lost when the coroutine is cancelled. In order to ensure that the resource can be properly closed in this case, the <a href="-cancellable-continuation/index.html">CancellableContinuation</a> interface provides two functions.</p><ul><li><p class="paragraph"><a href="-cancellable-continuation/invoke-on-cancellation.html">invokeOnCancellation</a> installs a handler that is called whenever a suspend coroutine is being cancelled. In addition to the example at the beginning, it can be used to ensure that a resource that was opened before the call to <code class="lang-kotlin">suspendCancellableCoroutine</code> or in its body is closed in case of cancellation.</p></li></ul><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">suspendCancellableCoroutine { continuation -&gt;<br>   val resource = openResource() // Opens some resource<br>   continuation.invokeOnCancellation {<br>       resource.close() // Ensures the resource is closed on cancellation<br>   }<br>   // ...<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><ul><li><p class="paragraph"><a href="-cancellable-continuation/resume.html">resume(value) { ... }</a> method on a <a href="-cancellable-continuation/index.html">CancellableContinuation</a> takes an optional <code class="lang-kotlin">onCancellation</code> block. It can be used when resuming with a resource that must be closed by the code that called the corresponding suspending function.</p></li></ul><div class="sample-container"><pre><code class="block lang-kotlin" theme="idea">suspendCancellableCoroutine { continuation -&gt;<br>    val callback = object : Callback { // Implementation of some callback interface<br>        // A callback provides a reference to some closeable resource<br>        override fun onCompleted(resource: T) {<br>            // Resume coroutine with a value provided by the callback and ensure the resource is closed in case<br>            // when the coroutine is cancelled before the caller gets a reference to the resource.<br>            continuation.resume(resource) {<br>                resource.close() // Close the resource on cancellation<br>            }<br>        }<br>    // ...<br>}</code></pre><span class="top-right-position"><span class="copy-icon"></span><div class="copy-popup-wrapper popup-to-left"><span class="copy-popup-icon"></span><span>Content copied to clipboard</span></div></span></div><h3 class=""> Implementation details and custom continuation interceptors</h3><p class="paragraph">The prompt cancellation guarantee is the result of a coordinated implementation inside <code class="lang-kotlin">suspendCancellableCoroutine</code> function and the <a href="-coroutine-dispatcher/index.html">CoroutineDispatcher</a> class. The coroutine dispatcher checks for the status of the <a href="-job/index.html">Job</a> immediately before continuing its normal execution and aborts this normal execution, calling all the corresponding cancellation handlers, if the job was cancelled.</p><p class="paragraph">If a custom implementation of <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-continuation-interceptor/index.html">ContinuationInterceptor</a> is used in a coroutine's context that does not extend <a href="-coroutine-dispatcher/index.html">CoroutineDispatcher</a> class, then there is no prompt cancellation guarantee. A custom continuation interceptor can resume execution of a previously suspended coroutine even if its job was already cancelled.</p></div></div>
</div>
      <div class="footer">
        <span class="go-to-top-icon"><a href="#content" id="go-to-top-link"></a></span><span>© 2023 Copyright</span><span class="pull-right"><span>Generated by </span><a href="https://github.com/Kotlin/dokka"><span>dokka</span><span class="padded-icon"></span></a></span>
      </div>
            </div>
        </div>
    </div>
</body>
</html>

